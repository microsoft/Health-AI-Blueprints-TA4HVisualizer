{"version":3,"file":"util.js","sourceRoot":"","sources":["../../src/util.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RestError } from \"@azure/core-rest-pipeline\";\nimport { URL, URLSearchParams } from \"./utils/url\";\nimport { logger } from \"./logger\";\nimport { StringIndexType as GeneratedStringIndexType } from \"./generated\";\nimport { TextAnalyticsAction } from \"./textAnalyticsAction\";\n\n/**\n * @internal\n */\nexport interface IdObject {\n  id: string;\n}\n\n/**\n * Given a sorted array of input objects (with a unique ID) and an unsorted array of results,\n * return a sorted array of results.\n *\n * @internal\n * @param sortedArray - An array of entries sorted by `id`\n * @param unsortedArray - An array of entries that contain `id` but are not sorted\n */\nexport function sortResponseIdObjects<T extends IdObject, U extends IdObject>(\n  sortedArray: T[],\n  unsortedArray: U[]\n): U[] {\n  const unsortedMap = new Map<string, U>();\n  for (const item of unsortedArray) {\n    unsortedMap.set(item.id, item);\n  }\n\n  if (unsortedArray.length !== sortedArray.length) {\n    const ordinal = unsortedArray.length > sortedArray.length ? \"more\" : \"fewer\";\n    logger.warning(\n      `The service returned ${ordinal} responses than inputs. Some errors may be treated as fatal.`\n    );\n  }\n\n  const result: U[] = [];\n  for (const sortedItem of sortedArray) {\n    const item = unsortedMap.get(sortedItem.id);\n    if (item) {\n      result.push(item);\n    }\n  }\n  return result;\n}\n\n/**\n * @internal\n */\nexport interface AssessmentIndex {\n  document: number;\n  sentence: number;\n  assessment: number;\n}\n\n/**\n * @internal\n */\nexport function parseAssessmentIndex(pointer: string): AssessmentIndex {\n  const regex = new RegExp(/#\\/documents\\/(\\d+)\\/sentences\\/(\\d+)\\/assessments\\/(\\d+)/);\n  const res = regex.exec(pointer);\n  if (res !== null) {\n    const assessmentIndex: AssessmentIndex = {\n      document: parseInt(res[1]),\n      sentence: parseInt(res[2]),\n      assessment: parseInt(res[3])\n    };\n    return assessmentIndex;\n  } else {\n    throw new Error(`Pointer \"${pointer}\" is not a valid Assessment pointer`);\n  }\n}\n\n/**\n * Parses the index of the healthcare entity from a JSON pointer.\n * @param pointer - a JSON pointer representing an entity\n * @internal\n */\nexport function parseHealthcareEntityIndex(pointer: string): number {\n  const regex = new RegExp(/#\\/results\\/documents\\/(\\d+)\\/entities\\/(\\d+)/);\n  const res = regex.exec(pointer);\n  if (res !== null) {\n    return parseInt(res[2]);\n  } else {\n    throw new Error(`Pointer \"${pointer}\" is not a valid healthcare entity pointer`);\n  }\n}\n\nconst jsEncodingUnit = \"Utf16CodeUnit\";\n\n/**\n * Measurement units that can used to calculate the offset and length properties.\n */\nexport type StringIndexType = \"TextElement_v8\" | \"UnicodeCodePoint\" | \"Utf16CodeUnit\";\n\n/**\n * @internal\n */\nexport function addStrEncodingParam<Options extends { stringIndexType?: StringIndexType }>(\n  options: Options\n): Options & { stringIndexType: StringIndexType } {\n  return { ...options, stringIndexType: options.stringIndexType || jsEncodingUnit };\n}\n\n/**\n * Set the stringIndexType property with default if it does not exist in x.\n * @param options - operation options bag that has a {@link StringIndexType}\n * @internal\n */\nexport function setStrEncodingParam<X extends { stringIndexType?: GeneratedStringIndexType }>(\n  x: X\n): X & { stringIndexType: GeneratedStringIndexType } {\n  return { ...x, stringIndexType: x.stringIndexType || jsEncodingUnit };\n}\n\nexport function setStrEncodingParamValue(\n  stringIndexType?: GeneratedStringIndexType\n): GeneratedStringIndexType {\n  return stringIndexType || jsEncodingUnit;\n}\n\n/**\n * Set the opinion mining property\n * @internal\n */\nexport function setOpinionMining<X extends { includeOpinionMining?: boolean }>(\n  x: X\n): X & { opinionMining?: boolean } {\n  return { ...x, opinionMining: x.includeOpinionMining };\n}\n\n/**\n * Set the pii categories property\n * @internal\n */\nexport function setCategoriesFilter<X extends { categoriesFilter?: string[] }>(\n  x: X\n): X & { piiCategories?: string[] } {\n  return { ...x, piiCategories: x.categoriesFilter };\n}\n\n/**\n * @internal\n */\nexport function addParamsToTask<X extends TextAnalyticsAction>(\n  action: X\n): { parameters?: Omit<X, \"actionName\">; taskName?: string } {\n  const { actionName, ...params } = action;\n  return { parameters: params, taskName: actionName };\n}\n\n/**\n * Set the modelVersion property with default if it does not exist in x.\n * @param options - operation options bag that has a {@link StringIndexType}\n * @internal\n */\nexport function setModelVersionParam<X extends { modelVersion?: string }>(\n  x: X\n): X & { modelVersion: string } {\n  return { ...x, modelVersion: x.modelVersion || \"latest\" };\n}\n\n/**\n * @internal\n */\nexport interface PageParam {\n  top: number;\n  skip: number;\n}\n\n/**\n * @internal\n */\nexport function nextLinkToTopAndSkip(nextLink: string): PageParam {\n  const url = new URL(nextLink);\n  const searchParams = new URLSearchParams(url.searchParams);\n  let top: number;\n  if (searchParams.has(\"$top\")) {\n    top = parseInt(searchParams.get(\"$top\")!);\n  } else {\n    throw new Error(`nextLink URL does not have the $top param: ${nextLink}`);\n  }\n  let skip: number;\n  if (searchParams.has(\"$skip\")) {\n    skip = parseInt(searchParams.get(\"$skip\")!);\n  } else {\n    throw new Error(`nextLink URL does not have the $skip param: ${nextLink}`);\n  }\n  return {\n    skip: skip,\n    top: top\n  };\n}\n\n/**\n * @internal\n */\nexport function getOperationId(operationLocation: string): string {\n  const lastSlashIndex = operationLocation.lastIndexOf(\"/\");\n  return operationLocation.substring(lastSlashIndex + 1);\n}\n\n/**\n * @internal\n * parses incoming errors from the service and if the inner error code is\n * InvalidDocumentBatch, it exposes that as the statusCode instead.\n * @param error - the incoming error\n */\nexport function handleInvalidDocumentBatch(error: unknown): any {\n  const castError = error as {\n    response: {\n      parsedBody?: {\n        error?: {\n          innererror?: {\n            code: string;\n            message: string;\n          };\n        };\n      };\n    };\n    statusCode: number;\n  };\n  const innerCode = castError.response?.parsedBody?.error?.innererror?.code;\n  const innerMessage = castError.response?.parsedBody?.error?.innererror?.message;\n  if (innerMessage) {\n    return innerCode === \"InvalidDocumentBatch\"\n      ? new RestError(innerMessage, { code: innerCode, statusCode: castError.statusCode })\n      : error;\n  } else {\n    // unfortunately, the service currently does not follow the swagger definition\n    // for errors in some cases.\n    // Issue: https://msazure.visualstudio.com/Cognitive%20Services/_workitems/edit/8775003/?workitem=8972164\n    // throw new Error(\n    //   `The error coming from the service does not follow the expected structure: ${error}`\n    // );\n    logger.warning(\n      `The error coming from the service does not follow the expected structure: ${error}`\n    );\n    return error;\n  }\n}\n\n/**\n * A wrapper for setTimeout that resolves a promise after t milliseconds.\n * @internal\n * @param timeInMs - The number of milliseconds to be delayed.\n * @returns Resolved promise\n */\nexport function delay(timeInMs: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(() => resolve(), timeInMs));\n}\n\n/**\n * @internal\n */\nexport function compose<T1, T2, T3>(fn1: (x: T1) => T2, fn2: (y: T2) => T3): (x: T1) => T3 {\n  return (value: T1) => fn2(fn1(value));\n}\n"]}