{"version":3,"file":"analyzeHealthcareEntitiesResult.js","sourceRoot":"","sources":["../../src/analyzeHealthcareEntitiesResult.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAelC,OAAO,EACL,4BAA4B,EAC5B,8BAA8B,EAG/B,MAAM,uBAAuB,CAAC;AAC/B,OAAO,EAAE,0BAA0B,EAAE,MAAM,QAAQ,CAAC;AAoKpD;;;;GAIG;AACH,SAAS,sCAAsC,CAC7C,MAAiC;;IAEjC,MAAM,EACJ,QAAQ,EACR,eAAe,EACf,SAAS,EACT,MAAM,EACN,IAAI,EACJ,KAAK,EACL,WAAW,EACX,MAAM,EACN,IAAI,EACL,GAAG,MAAM,CAAC;IACX,OAAO;QACL,QAAQ;QACR,eAAe;QACf,SAAS;QACT,MAAM;QACN,MAAM;QACN,IAAI;QACJ,cAAc,EAAE,IAAI;QACpB,WAAW,EAAE,WAAW;QACxB,WAAW,EACT,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,GAAG,CAAC,CAAC,EAAE,UAAU,EAAE,EAAE,EAAE,EAAoB,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC,mCAC1F,EAAE;KACL,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,SAAS,uBAAuB,CAC9B,QAA4B,EAC5B,SAA+B;IAE/B,OAAO,SAAS,CAAC,GAAG,CAClB,CAAC,QAA4B,EAA4B,EAAE,CAAC,CAAC;QAC3D,YAAY,EAAE,QAAQ,CAAC,YAAY;QACnC,KAAK,EAAE,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAC1B,CAAC,IAA8B,EAAgC,EAAE,CAAC,CAAC;YACjE,MAAM,EAAE,QAAQ,CAAC,0BAA0B,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACtD,IAAI,EAAE,IAAI,CAAC,IAAI;SAChB,CAAC,CACH;KACF,CAAC,CACH,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,4BAA4B,CAC1C,QAAoC;IAEpC,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAE,GAAG,QAAQ,CAAC;IACnE,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;IACzE,uCACK,8BAA8B,CAAC,EAAE,EAAE,QAAQ,EAAE,UAAU,CAAC,KAC3D,QAAQ,EAAE,WAAW,EACrB,eAAe,EAAE,uBAAuB,CAAC,WAAW,EAAE,SAAS,CAAC,IAChE;AACJ,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,iCAAiC,CAC/C,EAAU,EACV,KAAyB;IAEzB,OAAO,4BAA4B,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;AACjD,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport {\n  DocumentHealthcareEntities,\n  Entity,\n  HealthcareRelation,\n  TextDocumentBatchStatistics,\n  HealthcareEntity as GeneratedHealthcareEntity,\n  TextAnalyticsError,\n  HealthcareAssertion,\n  RelationType,\n  HealthcareRelationEntity,\n  HealthcareEntityCategory\n} from \"./generated/models\";\nimport {\n  makeTextAnalyticsErrorResult,\n  makeTextAnalyticsSuccessResult,\n  TextAnalyticsErrorResult,\n  TextAnalyticsSuccessResult\n} from \"./textAnalyticsResult\";\nimport { parseHealthcareEntityIndex } from \"./util\";\n\n/**\n * A type representing a reference for the healthcare entity into a specific\n * entity catalog.\n */\nexport interface EntityDataSource {\n  /**\n   * Entity Catalog. Examples include: UMLS, CHV, MSH, etc.\n   */\n  name: string;\n  /**\n   * Entity id in the given source catalog.\n   */\n  entityId: string;\n}\n\n/**\n * A healthcare entity represented as a node in a directed graph where the edges are\n * a particular type of relationship between the source and target nodes.\n */\nexport interface HealthcareEntity extends Entity {\n  /**\n   * Normalized name for the entity. For example, the normalized text for \"histologically\" is \"histologic\".\n   */\n  normalizedText?: string;\n  /**\n   * Whether the entity is negated.\n   */\n  assertion?: HealthcareAssertion;\n  /**\n   * Entity references in known data sources.\n   */\n  dataSources: EntityDataSource[];\n  /**\n   * Defines values for HealthcareEntityCategory.\n   * {@link KnownHealthcareEntityCategory} can be used interchangeably with HealthcareEntityCategory,\n   *  this enum contains the known values that the service supports.\n   * ### Known values supported by the service\n   * **BODY_STRUCTURE**\n   * **AGE**\n   * **GENDER**\n   * **EXAMINATION_NAME**\n   * **DATE**\n   * **DIRECTION**\n   * **FREQUENCY**\n   * **MEASUREMENT_VALUE**\n   * **MEASUREMENT_UNIT**\n   * **RELATIONAL_OPERATOR**\n   * **TIME**\n   * **GENE_OR_PROTEIN**\n   * **VARIANT**\n   * **ADMINISTRATIVE_EVENT**\n   * **CARE_ENVIRONMENT**\n   * **HEALTHCARE_PROFESSION**\n   * **DIAGNOSIS**\n   * **SYMPTOM_OR_SIGN**\n   * **CONDITION_QUALIFIER**\n   * **MEDICATION_CLASS**\n   * **MEDICATION_NAME**\n   * **DOSAGE**\n   * **MEDICATION_FORM**\n   * **MEDICATION_ROUTE**\n   * **FAMILY_RELATION**\n   * **TREATMENT_NAME**\n   */\n  category: HealthcareEntityCategory;\n}\n\n/**\n * The type of different roles a healthcare entity can play in a relation.\n */\nexport type HealthcareEntityRelationRoleType = string;\n\n/**\n * A healthcare entity that plays a specific role in a relation.\n */\nexport interface HealthcareEntityRelationRole {\n  /**\n   * A healthcare entity\n   */\n  entity: HealthcareEntity;\n  /**\n   * The role of the healthcare entity in a particular relation.\n   */\n  name: HealthcareEntityRelationRoleType;\n}\n\n/**\n * A relationship between two or more healthcare entities.\n */\nexport interface HealthcareEntityRelation {\n  /**\n   * The type of the healthcare relation.\n   */\n  relationType: RelationType;\n  /**\n   * The list of healthcare entities and their roles in the healthcare relation.\n   */\n  roles: HealthcareEntityRelationRole[];\n}\n\n/**\n * The results of a successful healthcare operation for a single document.\n */\nexport interface AnalyzeHealthcareEntitiesSuccessResult extends TextAnalyticsSuccessResult {\n  /**\n   * Healthcare entities.\n   */\n  entities: HealthcareEntity[];\n  /**\n   * Relations between healthcare entities.\n   */\n  entityRelations: HealthcareEntityRelation[];\n}\n\n/**\n * An error result from the healthcare operation on a single document.\n */\nexport type AnalyzeHealthcareEntitiesErrorResult = TextAnalyticsErrorResult;\n\n/**\n * The result of the healthcare operation on a single document.\n */\nexport type AnalyzeHealthcareEntitiesResult =\n  | AnalyzeHealthcareEntitiesSuccessResult\n  | AnalyzeHealthcareEntitiesErrorResult;\n\n/**\n * Array of {@link AnalyzeHealthcareEntitiesResult}\n */\nexport interface AnalyzeHealthcareEntitiesResultArray\n  extends Array<AnalyzeHealthcareEntitiesResult> {}\n\n/**\n * The results of a healthcare operation represented as a paged iterator that can\n * either iterate over the results on a document-by-document basis or, by\n * byPage(), can iterate over pages of documents.\n */\nexport type PagedAsyncIterableAnalyzeHealthcareEntitiesResult = PagedAsyncIterableIterator<\n  AnalyzeHealthcareEntitiesResult,\n  AnalyzeHealthcareEntitiesResultArray\n>;\n\n/**\n * The results of a healthcare operation represented as a paged iterator that can\n * either iterate over the results on a document-by-document basis or, by\n * byPage(), can iterate over pages of documents.\n */\nexport interface PagedAnalyzeHealthcareEntitiesResult\n  extends PagedAsyncIterableAnalyzeHealthcareEntitiesResult {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\n/**\n * Creates a user-friendly healthcare entity represented as a node in a graph\n * @param entity - the healthcare entity returned by the service\n * @internal\n */\nfunction makeHealthcareEntitiesWithoutNeighbors(\n  entity: GeneratedHealthcareEntity\n): HealthcareEntity {\n  const {\n    category,\n    confidenceScore,\n    assertion,\n    offset,\n    text,\n    links,\n    subcategory,\n    length,\n    name\n  } = entity;\n  return {\n    category,\n    confidenceScore,\n    assertion,\n    offset,\n    length,\n    text,\n    normalizedText: name,\n    subCategory: subcategory,\n    dataSources:\n      links?.map(({ dataSource, id }): EntityDataSource => ({ name: dataSource, entityId: id })) ??\n      []\n  };\n}\n\n/**\n * @internal\n */\nfunction makeHealthcareRelations(\n  entities: HealthcareEntity[],\n  relations: HealthcareRelation[]\n): HealthcareEntityRelation[] {\n  return relations.map(\n    (relation: HealthcareRelation): HealthcareEntityRelation => ({\n      relationType: relation.relationType,\n      roles: relation.entities.map(\n        (role: HealthcareRelationEntity): HealthcareEntityRelationRole => ({\n          entity: entities[parseHealthcareEntityIndex(role.ref)],\n          name: role.role\n        })\n      )\n    })\n  );\n}\n\n/**\n * Creates a healthcare entity in the convenience layer from the one sent by the service.\n * @param document - incoming results sent by the service for a particular document\n * @internal\n */\nexport function makeHealthcareEntitiesResult(\n  document: DocumentHealthcareEntities\n): AnalyzeHealthcareEntitiesSuccessResult {\n  const { id, entities, relations, warnings, statistics } = document;\n  const newEntities = entities.map(makeHealthcareEntitiesWithoutNeighbors);\n  return {\n    ...makeTextAnalyticsSuccessResult(id, warnings, statistics),\n    entities: newEntities,\n    entityRelations: makeHealthcareRelations(newEntities, relations)\n  };\n}\n\n/**\n * @internal\n */\nexport function makeHealthcareEntitiesErrorResult(\n  id: string,\n  error: TextAnalyticsError\n): AnalyzeHealthcareEntitiesErrorResult {\n  return makeTextAnalyticsErrorResult(id, error);\n}\n"]}