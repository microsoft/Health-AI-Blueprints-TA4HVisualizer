{"version":3,"file":"analyzeActionsResult.js","sourceRoot":"","sources":["../../src/analyzeActionsResult.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport {\n  AnalyzeSentimentResultArray,\n  makeAnalyzeSentimentResultArray\n} from \"./analyzeSentimentResultArray\";\nimport {\n  ExtractKeyPhrasesResultArray,\n  makeExtractKeyPhrasesResultArray\n} from \"./extractKeyPhrasesResultArray\";\nimport { AnalyzeJobState as GeneratedResponse, TextDocumentInput } from \"./generated/models\";\nimport {\n  makeRecognizeCategorizedEntitiesResultArray,\n  RecognizeCategorizedEntitiesResultArray\n} from \"./recognizeCategorizedEntitiesResultArray\";\nimport {\n  makeRecognizeLinkedEntitiesResultArray,\n  RecognizeLinkedEntitiesResultArray\n} from \"./recognizeLinkedEntitiesResultArray\";\nimport {\n  makeRecognizePiiEntitiesResultArray,\n  RecognizePiiEntitiesResultArray\n} from \"./recognizePiiEntitiesResultArray\";\nimport { ErrorCode, intoTextAnalyticsError, TextAnalyticsError } from \"./textAnalyticsResult\";\n\n/**\n * The results of an analyze Actions operation.\n */\nexport interface AnalyzeActionsResult {\n  /**\n   * Array of the results for each categorized entities recognition action.\n   */\n  recognizeEntitiesResults: RecognizeCategorizedEntitiesActionResult[];\n  /**\n   * Array of the results for each Pii entities recognition action.\n   */\n  recognizePiiEntitiesResults: RecognizePiiEntitiesActionResult[];\n  /**\n   * Array of the results for each key phrases extraction action.\n   */\n  extractKeyPhrasesResults: ExtractKeyPhrasesActionResult[];\n  /**\n   * Array of the results for each linked entities recognition action.\n   */\n  recognizeLinkedEntitiesResults: RecognizeLinkedEntitiesActionResult[];\n  /**\n   * Array of the results for each analyze sentiment action.\n   */\n  analyzeSentimentResults: AnalyzeSentimentActionResult[];\n}\n\n/**\n * The state of a succeeded action.\n */\nexport interface TextAnalyticsActionSuccessState {\n  /**\n   * When this action was completed by the service.\n   */\n  readonly completedOn: Date;\n  /**\n   * Discriminant to determine if that this is an error result.\n   */\n  readonly error?: undefined;\n}\n\n/**\n * The error of an analyze batch action.\n */\nexport interface TextAnalyticsActionErrorResult {\n  /**\n   * When this action was completed by the service.\n   */\n  readonly failedOn: Date;\n  /**\n   * The Error for this action result.\n   */\n  readonly error: TextAnalyticsError;\n}\n\n/**\n * The error of a recognize categorized entities action.\n */\nexport type RecognizeCategorizedEntitiesActionErrorResult = TextAnalyticsActionErrorResult;\n\n/**\n * The results of a succeeded recognize categorized entities action.\n */\nexport interface RecognizeCategorizedEntitiesActionSuccessResult\n  extends TextAnalyticsActionSuccessState {\n  /**\n   * Array of the results for each categorized entities recognition action.\n   */\n  results: RecognizeCategorizedEntitiesResultArray;\n}\n\n/**\n * The result of a recognize categorized entities action.\n */\nexport type RecognizeCategorizedEntitiesActionResult =\n  | RecognizeCategorizedEntitiesActionSuccessResult\n  | RecognizeCategorizedEntitiesActionErrorResult;\n\n/**\n * The error of a recognize pii entities action.\n */\nexport type RecognizePiiEntitiesActionErrorResult = TextAnalyticsActionErrorResult;\n\n/**\n * The results of a succeeded recognize pii entities action.\n */\nexport interface RecognizePiiEntitiesActionSuccessResult extends TextAnalyticsActionSuccessState {\n  /**\n   * Array of the results for each pii entities recognition action.\n   */\n  results: RecognizePiiEntitiesResultArray;\n}\n\n/**\n * The result of a recognize pii entities action.\n */\nexport type RecognizePiiEntitiesActionResult =\n  | RecognizePiiEntitiesActionSuccessResult\n  | RecognizePiiEntitiesActionErrorResult;\n\n/**\n * The error of a extract key phrases action.\n */\nexport type ExtractKeyPhrasesActionErrorResult = TextAnalyticsActionErrorResult;\n\n/**\n * The results of a succeeded extract key phrases action.\n */\nexport interface ExtractKeyPhrasesActionSuccessResult extends TextAnalyticsActionSuccessState {\n  /**\n   * Array of the results for each extract key phrases action.\n   */\n  results: ExtractKeyPhrasesResultArray;\n}\n\n/**\n * The result of a extract key phrases action.\n */\nexport type ExtractKeyPhrasesActionResult =\n  | ExtractKeyPhrasesActionSuccessResult\n  | ExtractKeyPhrasesActionErrorResult;\n\n/**\n * The error of a recognize linked entities action.\n */\nexport type RecognizeLinkedEntitiesActionErrorResult = TextAnalyticsActionErrorResult;\n\n/**\n * The results of a succeeded recognize linked entities action.\n */\nexport interface RecognizeLinkedEntitiesActionSuccessResult\n  extends TextAnalyticsActionSuccessState {\n  /**\n   * Array of the results for each linked entities recognition action.\n   */\n  results: RecognizeLinkedEntitiesResultArray;\n}\n\n/**\n * The result of a recognize linked entities action.\n */\nexport type RecognizeLinkedEntitiesActionResult =\n  | RecognizeLinkedEntitiesActionSuccessResult\n  | RecognizeLinkedEntitiesActionErrorResult;\n\n/**\n * The error of an analyze sentiment action.\n */\nexport type AnalyzeSentimentActionErrorResult = TextAnalyticsActionErrorResult;\n\n/**\n * The results of a succeeded analyze sentiment action.\n */\nexport interface AnalyzeSentimentActionSuccessResult extends TextAnalyticsActionSuccessState {\n  /**\n   * Array of the results for each analyze sentiment action.\n   */\n  results: AnalyzeSentimentResultArray;\n}\n\n/**\n * The result of an analyze sentiment action.\n */\nexport type AnalyzeSentimentActionResult =\n  | AnalyzeSentimentActionSuccessResult\n  | AnalyzeSentimentActionErrorResult;\n\n/**\n * The results of an analyze Actions operation represented as a paged iterator that\n * iterates over the results of the requested actions.\n */\nexport type PagedAsyncIterableAnalyzeActionsResult = PagedAsyncIterableIterator<\n  AnalyzeActionsResult,\n  AnalyzeActionsResult\n>;\n\n/**\n * The results of an analyze actions operation represented as a paged iterator that\n * iterates over the results of the requested actions.\n */\nexport interface PagedAnalyzeActionsResult extends PagedAsyncIterableAnalyzeActionsResult {\n  // /**\n  //  * Statistics about the input document batch and how it was processed\n  //  * by the service. This property will have a value when includeStatistics is set to true\n  //  * in the client call.\n  //  */\n  // statistics?: TextDocumentBatchStatistics;\n}\n\n/**\n * The type of different actions supported by the begin analyze actions operation.\n * @internal\n */\ntype TextAnalyticsActionType =\n  | \"RecognizeCategorizedEntities\"\n  | \"RecognizePiiEntities\"\n  | \"ExtractKeyPhrases\"\n  | \"RecognizeLinkedEntities\"\n  | \"AnalyzeSentiment\";\n\n/**\n * The type of an action error with the type of the action that erred and its\n * index in the list of input actions.\n * @internal\n */\ninterface TextAnalyticsActionError {\n  /**\n   * A code describing the kind of error produced\n   */\n  readonly code: ErrorCode;\n  /**\n   * A message from the service explaining the error\n   */\n  readonly message: string;\n  /**\n   * The type of the action that erred\n   */\n  readonly type: TextAnalyticsActionType;\n  /**\n   * The index of the action that erred in the list of input actions\n   */\n  readonly index: number;\n}\n\n/**\n * Converts the service task name (in the JSON pointer in an action error) to an action type name.\n * @param serviceActionType - The task type name the service uses.\n * @returns the action type name that the package uses\n * @internal\n */\nfunction convertTaskTypeToActionType(taskType: string): TextAnalyticsActionType {\n  switch (taskType) {\n    case \"entityRecognitionTasks\": {\n      return \"RecognizeCategorizedEntities\";\n    }\n    case \"entityRecognitionPiiTasks\": {\n      return \"RecognizePiiEntities\";\n    }\n    case \"keyPhraseExtractionTasks\": {\n      return \"ExtractKeyPhrases\";\n    }\n    case \"entityLinkingTasks\": {\n      return \"RecognizeLinkedEntities\";\n    }\n    case \"sentimentAnalysisTasks\": {\n      return \"AnalyzeSentiment\";\n    }\n    default: {\n      throw new Error(`unexpected action type from the service: ${taskType}`);\n    }\n  }\n}\n\n/**\n * Converts a service action error to one with the JSON pointer converted to an action index.\n * @param erredActions - the action error the service sent\n * @returns an action error with an action type and index\n * @internal\n */\nexport function parseActionError(erredActions: TextAnalyticsError): TextAnalyticsActionError {\n  if (erredActions.target) {\n    const regex = new RegExp(\n      /#\\/tasks\\/(entityRecognitionTasks|entityRecognitionPiiTasks|keyPhraseExtractionTasks|entityLinkingTasks|sentimentAnalysisTasks)\\/(\\d+)/\n    );\n    const result = regex.exec(erredActions.target);\n    if (result !== null) {\n      return {\n        code: erredActions.code,\n        message: erredActions.message,\n        index: parseInt(result[2]),\n        type: convertTaskTypeToActionType(result[1])\n      };\n    } else {\n      throw new Error(`Pointer \"${erredActions.target}\" is not a valid action pointer`);\n    }\n  } else {\n    throw new Error(\n      \"expected an error with a target field referencing an action but did not get one\"\n    );\n  }\n}\n\n/**\n * Categorize each action error into a bucket according to its action type.\n * @param erredActions - list of action errors\n * @param recognizeEntitiesActionErrors - a list of recognize entities action errors to be filled from the errors list\n * @param recognizePiiEntitiesActionErrors - a list of recognize pii entities action errors to be filled from the errors list\n * @param extractKeyPhrasesActionErrors - a list of extract key phrases action errors to be filled from the errors list\n * @internal\n */\nfunction categorizeActionErrors(\n  erredActions: TextAnalyticsError[],\n  recognizeEntitiesActionErrors: TextAnalyticsActionError[],\n  recognizePiiEntitiesActionErrors: TextAnalyticsActionError[],\n  extractKeyPhrasesActionErrors: TextAnalyticsActionError[],\n  recognizeLinkedEntitiesActionErrors: TextAnalyticsActionError[],\n  analyzeSentimentActionErrors: TextAnalyticsActionError[]\n): void {\n  for (const error of erredActions) {\n    const actionError = parseActionError(error);\n    switch (actionError.type) {\n      case \"RecognizeCategorizedEntities\": {\n        recognizeEntitiesActionErrors.push(actionError);\n        break;\n      }\n      case \"RecognizePiiEntities\": {\n        recognizePiiEntitiesActionErrors.push(actionError);\n        break;\n      }\n      case \"ExtractKeyPhrases\": {\n        extractKeyPhrasesActionErrors.push(actionError);\n        break;\n      }\n      case \"RecognizeLinkedEntities\": {\n        recognizeLinkedEntitiesActionErrors.push(actionError);\n        break;\n      }\n      case \"AnalyzeSentiment\": {\n        analyzeSentimentActionErrors.push(actionError);\n        break;\n      }\n    }\n  }\n}\n\n/**\n * @internal\n * @param error - the error the service sent for a task\n * @param lastUpdateDateTime - the time when this task failed\n */\nfunction createErredAction(\n  error: TextAnalyticsActionError,\n  lastUpdateDateTime: Date\n): TextAnalyticsActionErrorResult {\n  return { error: intoTextAnalyticsError(error), failedOn: lastUpdateDateTime };\n}\n\ninterface TaskSuccessResult<T> {\n  results?: T;\n  lastUpdateDateTime: Date;\n}\n\ntype ActionResult<TSuccess> =\n  | {\n      results: TSuccess;\n      completedOn: Date;\n    }\n  | TextAnalyticsActionErrorResult;\n\n/**\n * Creates a list of results for any action.\n * @param documents - list of input documents\n * @param makeResultsArray - a function to convert the results of a service response to the SDK's one\n * @param succeededTasks - list of succeeded action results\n * @param erredActions - list of erred actions\n * @internal\n */\nfunction makeActionResult<TTaskResult, TActionResult>(\n  documents: TextDocumentInput[],\n  makeResultsArray: (docs: TextDocumentInput[], x: TTaskResult) => TActionResult,\n  succeededTasks: TaskSuccessResult<TTaskResult>[],\n  erredActions: TextAnalyticsActionError[]\n): ActionResult<TActionResult>[] {\n  let errorIndex = 0;\n  function convertTasksToActions(\n    actions: ActionResult<TActionResult>[],\n    task: TaskSuccessResult<TTaskResult>\n  ): ActionResult<TActionResult>[] {\n    const { results: actionResults, lastUpdateDateTime } = task;\n    if (actionResults !== undefined) {\n      const recognizeEntitiesResults = makeResultsArray(documents, actionResults);\n      return [\n        ...actions,\n        {\n          results: recognizeEntitiesResults,\n          completedOn: lastUpdateDateTime\n        }\n      ];\n    } else {\n      return [...actions, createErredAction(erredActions[errorIndex++], lastUpdateDateTime)];\n    }\n  }\n  return succeededTasks.reduce(convertTasksToActions, []);\n}\n\n/**\n * Creates the user-friendly action results object for the begin analyze actions operation.\n * @param response - the begin analyze actions operation response\n * @param documents - the list of input documents\n * @returns - the user-friendly action results object\n * @internal\n */\nexport function createAnalyzeActionsResult(\n  response: GeneratedResponse,\n  documents: TextDocumentInput[]\n): AnalyzeActionsResult {\n  const recognizeEntitiesActionErrors: TextAnalyticsActionError[] = [];\n  const recognizePiiEntitiesActionErrors: TextAnalyticsActionError[] = [];\n  const extractKeyPhrasesActionErrors: TextAnalyticsActionError[] = [];\n  const recognizeLinkedEntitiesActionErrors: TextAnalyticsActionError[] = [];\n  const analyzeSentimentActionErrors: TextAnalyticsActionError[] = [];\n  categorizeActionErrors(\n    response?.errors ?? [],\n    recognizeEntitiesActionErrors,\n    recognizePiiEntitiesActionErrors,\n    extractKeyPhrasesActionErrors,\n    recognizeLinkedEntitiesActionErrors,\n    analyzeSentimentActionErrors\n  );\n  return {\n    recognizeEntitiesResults: makeActionResult(\n      documents,\n      makeRecognizeCategorizedEntitiesResultArray,\n      response.tasks.entityRecognitionTasks ?? [],\n      recognizeEntitiesActionErrors\n    ),\n    recognizePiiEntitiesResults: makeActionResult(\n      documents,\n      makeRecognizePiiEntitiesResultArray,\n      response.tasks.entityRecognitionPiiTasks ?? [],\n      recognizePiiEntitiesActionErrors\n    ),\n    extractKeyPhrasesResults: makeActionResult(\n      documents,\n      makeExtractKeyPhrasesResultArray,\n      response.tasks.keyPhraseExtractionTasks ?? [],\n      extractKeyPhrasesActionErrors\n    ),\n    recognizeLinkedEntitiesResults: makeActionResult(\n      documents,\n      makeRecognizeLinkedEntitiesResultArray,\n      response.tasks.entityLinkingTasks ?? [],\n      recognizeLinkedEntitiesActionErrors\n    ),\n    analyzeSentimentResults: makeActionResult(\n      documents,\n      makeAnalyzeSentimentResultArray,\n      response.tasks.sentimentAnalysisTasks ?? [],\n      analyzeSentimentActionErrors\n    )\n  };\n}\n"]}