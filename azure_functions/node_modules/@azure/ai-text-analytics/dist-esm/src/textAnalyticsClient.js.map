{"version":3,"file":"textAnalyticsClient.js","sourceRoot":"","sources":["../../src/textAnalyticsClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CommonClientOptions } from \"@azure/core-client\";\nimport {\n  InternalPipelineOptions,\n  bearerTokenAuthenticationPolicy\n} from \"@azure/core-rest-pipeline\";\nimport { TokenCredential, KeyCredential, isTokenCredential } from \"@azure/core-auth\";\nimport { SDK_VERSION } from \"./constants\";\nimport { GeneratedClient } from \"./generated/generatedClient\";\nimport { logger } from \"./logger\";\nimport {\n  JobManifestTasks as GeneratedActions,\n  DetectLanguageInput,\n  GeneratedClientEntitiesRecognitionPiiOptionalParams as GeneratedRecognizePiiEntitiesOptions,\n  GeneratedClientSentimentOptionalParams as GeneratedAnalyzeSentimentOptions,\n  GeneratedClientEntitiesRecognitionGeneralOptionalParams as GeneratedRecognizeCategorizedEntitiesOptions,\n  GeneratedClientEntitiesLinkingOptionalParams as GeneratedRecognizeLinkedEntitiesOptions,\n  GeneratedClientKeyPhrasesOptionalParams as GeneratedExtractKeyPhrasesOptions,\n  GeneratedClientLanguagesOptionalParams as GeneratedDetectLanguageOptions,\n  TextDocumentInput,\n  PiiCategory\n} from \"./generated/models\";\nimport {\n  DetectLanguageResultArray,\n  makeDetectLanguageResultArray\n} from \"./detectLanguageResultArray\";\nimport {\n  RecognizeCategorizedEntitiesResultArray,\n  makeRecognizeCategorizedEntitiesResultArray\n} from \"./recognizeCategorizedEntitiesResultArray\";\nimport {\n  AnalyzeSentimentResultArray,\n  makeAnalyzeSentimentResultArray\n} from \"./analyzeSentimentResultArray\";\nimport {\n  makeExtractKeyPhrasesResultArray,\n  ExtractKeyPhrasesResultArray\n} from \"./extractKeyPhrasesResultArray\";\nimport {\n  RecognizePiiEntitiesResultArray,\n  makeRecognizePiiEntitiesResultArray\n} from \"./recognizePiiEntitiesResultArray\";\nimport {\n  RecognizeLinkedEntitiesResultArray,\n  makeRecognizeLinkedEntitiesResultArray\n} from \"./recognizeLinkedEntitiesResultArray\";\nimport { createSpan } from \"./tracing\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { textAnalyticsAzureKeyCredentialPolicy } from \"./azureKeyCredentialPolicy\";\nimport {\n  addParamsToTask,\n  compose,\n  handleInvalidDocumentBatch,\n  setCategoriesFilter,\n  setOpinionMining,\n  setStrEncodingParam,\n  setStrEncodingParamValue,\n  StringIndexType\n} from \"./util\";\nimport {\n  BeginAnalyzeHealthcarePoller,\n  AnalyzeHealthcareEntitiesPollerLike\n} from \"./lro/health/poller\";\nimport {\n  BeginAnalyzeHealthcareEntitiesOptions,\n  AnalyzeHealthcareOperationState\n} from \"./lro/health/operation\";\nimport { TextAnalyticsOperationOptions } from \"./textAnalyticsOperationOptions\";\nimport { AnalyzeActionsPollerLike, BeginAnalyzeActionsPoller } from \"./lro/analyze/poller\";\nimport {\n  AnalyzeActionsOperationMetadata,\n  BeginAnalyzeActionsOptions,\n  AnalyzeActionsOperationState\n} from \"./lro/analyze/operation\";\nimport { AnalysisPollOperationState, OperationMetadata } from \"./lro/poller\";\nimport { TextAnalyticsAction } from \"./textAnalyticsAction\";\n\nexport {\n  BeginAnalyzeActionsOptions,\n  AnalyzeActionsPollerLike,\n  AnalyzeActionsOperationState,\n  BeginAnalyzeHealthcareEntitiesOptions,\n  AnalyzeHealthcareEntitiesPollerLike,\n  AnalyzeHealthcareOperationState,\n  AnalysisPollOperationState,\n  OperationMetadata,\n  AnalyzeActionsOperationMetadata,\n  StringIndexType\n};\n\nconst DEFAULT_COGNITIVE_SCOPE = \"https://cognitiveservices.azure.com/.default\";\n\n/**\n * Client options used to configure TextAnalytics API requests.\n */\nexport interface TextAnalyticsClientOptions extends CommonClientOptions {\n  /**\n   * The default country hint to use. Defaults to \"us\".\n   */\n  defaultCountryHint?: string;\n\n  /**\n   * The default language to use. Defaults to \"en\".\n   */\n  defaultLanguage?: string;\n}\n\n/**\n * Options for the detect languages operation.\n */\nexport interface DetectLanguageOptions extends TextAnalyticsOperationOptions {}\n\n/**\n * Options for the recognize entities operation.\n */\nexport interface RecognizeCategorizedEntitiesOptions extends TextAnalyticsOperationOptions {\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties.\n   * Possible units are \"TextElements_v8\", \"UnicodeCodePoint\", and \"Utf16CodeUnit\".\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n}\n\n/**\n * Options for the analyze sentiment operation.\n */\nexport interface AnalyzeSentimentOptions extends TextAnalyticsOperationOptions {\n  /**\n   * Whether to mine the opinions of a sentence and conduct more  granular\n   * analysis around the aspects of a product or service (also known as\n   * aspect-based sentiment analysis). If set to true, the returned\n   * `SentenceSentiment` objects will have property `opinions` containing\n   * the result of this analysis.\n   * More information about the feature can be found here: {@link https://docs.microsoft.com/azure/cognitive-services/text-analytics/how-tos/text-analytics-how-to-sentiment-analysis?tabs=version-3-1#opinion-mining}\n   */\n  includeOpinionMining?: boolean;\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties.\n   * Possible units are \"TextElements_v8\", \"UnicodeCodePoint\", and \"Utf16CodeUnit\".\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n}\n\n/**\n * The types of PII domains the user can choose from.\n */\nexport enum PiiEntityDomain {\n  /**\n   * @see {@link https://aka.ms/tanerpii} for more information.\n   */\n  PROTECTED_HEALTH_INFORMATION = \"PHI\"\n}\n\n/**\n * Options for the recognize PII entities operation.\n */\nexport interface RecognizePiiEntitiesOptions extends TextAnalyticsOperationOptions {\n  /**\n   * Filters entities to ones only included in the specified domain (e.g., if\n   * set to 'PHI', entities in the Protected Healthcare Information domain will\n   * only be returned). @see {@link https://aka.ms/tanerpii} for more information.\n   */\n  domainFilter?: PiiEntityDomain;\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties.\n   * Possible units are \"TextElements_v8\", \"UnicodeCodePoint\", and \"Utf16CodeUnit\".\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n  /**\n   * Filters entities to ones only included in the specified array of categories\n   */\n  categoriesFilter?: PiiCategory[];\n}\n\n/**\n * Options for the extract key phrases operation.\n */\nexport interface ExtractKeyPhrasesOptions extends TextAnalyticsOperationOptions {}\n\n/**\n * Options for the recognize linked entities operation.\n */\nexport interface RecognizeLinkedEntitiesOptions extends TextAnalyticsOperationOptions {\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties.\n   * Possible units are \"TextElements_v8\", \"UnicodeCodePoint\", and \"Utf16CodeUnit\".\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n}\n\n/**\n * Options for an entities recognition action.\n */\nexport interface RecognizeCategorizedEntitiesAction extends TextAnalyticsAction {\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties.\n   * Possible units are \"TextElements_v8\", \"UnicodeCodePoint\", and \"Utf16CodeUnit\".\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n  /**\n   * If set to true, you opt-out of having your text input logged for troubleshooting. By default, Text Analytics\n   * logs your input text for 48 hours, solely to allow for troubleshooting issues. Setting this parameter to true,\n   * disables input logging and may limit our ability to remediate issues that occur.\n   */\n  disableServiceLogs?: boolean;\n}\n\n/**\n * Options for a Pii entities recognition action.\n */\nexport interface RecognizePiiEntitiesAction extends TextAnalyticsAction {\n  /**\n   * Filters entities to ones only included in the specified domain (e.g., if\n   * set to 'PHI', entities in the Protected Healthcare Information domain will\n   * only be returned). @see {@link https://aka.ms/tanerpii} for more information.\n   */\n  domainFilter?: PiiEntityDomain;\n  /**\n   * Filters entities to ones only included in the specified array of categories\n   */\n  categoriesFilter?: PiiCategory[];\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties.\n   * Possible units are \"TextElements_v8\", \"UnicodeCodePoint\", and \"Utf16CodeUnit\".\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n  /**\n   * If set to false, you opt-in to have your text input logged for troubleshooting. By default, Text Analytics\n   * will not log your input text for pii entities recognition. Setting this parameter to false,\n   * enables input logging.\n   */\n  disableServiceLogs?: boolean;\n}\n\n/**\n * Options for a key phrases recognition action.\n */\nexport interface ExtractKeyPhrasesAction extends TextAnalyticsAction {\n  /**\n   * If set to false, you opt-in to have your text input logged for troubleshooting. By default, Text Analytics\n   * will not log your input text for pii entities recognition. Setting this parameter to false,\n   * enables input logging.\n   */\n  disableServiceLogs?: boolean;\n}\n\n/**\n * Options for an entities linking action.\n */\nexport interface RecognizeLinkedEntitiesAction extends TextAnalyticsAction {\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties.\n   * Possible units are \"TextElements_v8\", \"UnicodeCodePoint\", and \"Utf16CodeUnit\".\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n  /**\n   * If set to true, you opt-out of having your text input logged for troubleshooting. By default, Text Analytics\n   * logs your input text for 48 hours, solely to allow for troubleshooting issues. Setting this parameter to true,\n   * disables input logging and may limit our ability to remediate issues that occur.\n   */\n  disableServiceLogs?: boolean;\n}\n\n/**\n * Options for an analyze sentiment action.\n */\nexport interface AnalyzeSentimentAction extends TextAnalyticsAction {\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties.\n   * Possible units are \"TextElements_v8\", \"UnicodeCodePoint\", and \"Utf16CodeUnit\".\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n  /**\n   * If set to true, you opt-out of having your text input logged for troubleshooting. By default, Text Analytics\n   * logs your input text for 48 hours, solely to allow for troubleshooting issues. Setting this parameter to true,\n   * disables input logging and may limit our ability to remediate issues that occur.\n   */\n  disableServiceLogs?: boolean;\n  /**\n   * Whether to mine the opinions of a sentence and conduct more  granular\n   * analysis around the aspects of a product or service (also known as\n   * aspect-based sentiment analysis). If set to true, the returned\n   * `SentenceSentiment` objects will have property `opinions` containing\n   * the result of this analysis.\n   * More information about the feature can be found here: {@link https://docs.microsoft.com/azure/cognitive-services/text-analytics/how-tos/text-analytics-how-to-sentiment-analysis?tabs=version-3-1#opinion-mining}\n   */\n  includeOpinionMining?: boolean;\n}\n\n/**\n * Description of collection of actions for the analyze API to perform on input documents. However, currently, the service can accept up to one action only per action type.\n */\nexport interface TextAnalyticsActions {\n  /**\n   * A collection of descriptions of entities recognition actions. However, currently, the service can accept up to one action only for `recognizeEntities`.\n   */\n  recognizeEntitiesActions?: RecognizeCategorizedEntitiesAction[];\n  /**\n   * A collection of descriptions of Pii entities recognition actions. However, currently, the service can accept up to one action only for `recognizePiiEntities`.\n   */\n  recognizePiiEntitiesActions?: RecognizePiiEntitiesAction[];\n  /**\n   * A collection of descriptions of key phrases recognition actions. However, currently, the service can accept up to one action only for `extractKeyPhrases`.\n   */\n  extractKeyPhrasesActions?: ExtractKeyPhrasesAction[];\n  /**\n   * A collection of descriptions of entities linking actions. However, currently, the service can accept up to one action only for `recognizeLinkedEntities`.\n   */\n  recognizeLinkedEntitiesActions?: RecognizeLinkedEntitiesAction[];\n  /**\n   * A collection of descriptions of sentiment analysis actions. However, currently, the service can accept up to one action only for `analyzeSentiment`.\n   */\n  analyzeSentimentActions?: AnalyzeSentimentAction[];\n}\n/**\n * Client class for interacting with Azure Text Analytics.\n */\nexport class TextAnalyticsClient {\n  /**\n   * The URL to the TextAnalytics endpoint\n   */\n  public readonly endpointUrl: string;\n\n  /**\n   * The default country hint to use. Defaults to \"us\".\n   */\n  public defaultCountryHint: string;\n\n  /**\n   * The default language to use. Defaults to \"en\".\n   */\n  public defaultLanguage: string;\n\n  /**\n   * @internal\n   * A reference to the auto-generated TextAnalytics HTTP client.\n   */\n  private readonly client: GeneratedClient;\n\n  /**\n   * Creates an instance of TextAnalyticsClient.\n   *\n   * Example usage:\n   * ```ts\n   * import { TextAnalyticsClient, AzureKeyCredential } from \"@azure/ai-text-analytics\";\n   *\n   * const client = new TextAnalyticsClient(\n   *    \"<service endpoint>\",\n   *    new AzureKeyCredential(\"<api key>\")\n   * );\n   * ```\n   * @param endpointUrl - The URL to the TextAnalytics endpoint\n   * @param credential - Used to authenticate requests to the service.\n   * @param options - Used to configure the TextAnalytics client.\n   */\n  constructor(\n    endpointUrl: string,\n    credential: TokenCredential | KeyCredential,\n    options: TextAnalyticsClientOptions = {}\n  ) {\n    this.endpointUrl = endpointUrl;\n    const { defaultCountryHint = \"us\", defaultLanguage = \"en\", ...pipelineOptions } = options;\n    this.defaultCountryHint = defaultCountryHint;\n    this.defaultLanguage = defaultLanguage;\n\n    const libInfo = `azsdk-js-ai-textanalytics/${SDK_VERSION}`;\n    if (!pipelineOptions.userAgentOptions) {\n      pipelineOptions.userAgentOptions = {};\n    }\n    if (pipelineOptions.userAgentOptions.userAgentPrefix) {\n      pipelineOptions.userAgentOptions.userAgentPrefix = `${pipelineOptions.userAgentOptions.userAgentPrefix} ${libInfo}`;\n    } else {\n      pipelineOptions.userAgentOptions.userAgentPrefix = libInfo;\n    }\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...pipelineOptions,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          additionalAllowedHeaderNames: [\"x-ms-correlation-request-id\", \"x-ms-request-id\"]\n        }\n      }\n    };\n\n    this.client = new GeneratedClient(this.endpointUrl, internalPipelineOptions);\n\n    const authPolicy = isTokenCredential(credential)\n      ? bearerTokenAuthenticationPolicy({ credential, scopes: DEFAULT_COGNITIVE_SCOPE })\n      : textAnalyticsAzureKeyCredentialPolicy(credential);\n\n    this.client.pipeline.addPolicy(authPolicy);\n  }\n\n  /**\n   * Runs a predictive model to determine the language that the passed-in\n   * input strings are written in, and returns, for each one, the detected\n   * language as well as a score indicating the model's confidence that the\n   * inferred language is correct.  Scores close to 1 indicate high certainty in\n   * the result.  120 languages are supported.\n   * @param documents - A collection of input strings to analyze.\n   * @param countryHint - Indicates the country of origin for all of\n   *   the input strings to assist the text analytics model in predicting\n   *   the language they are written in.  If unspecified, this value will be\n   *   set to the default country hint in `TextAnalyticsClientOptions`.\n   *   If set to an empty string, or the string \"none\", the service will apply a\n   *   model where the country is explicitly unset.\n   *   The same country hint is applied to all strings in the input collection.\n   * @param options - Optional parameters for the operation.\n   */\n  public async detectLanguage(\n    documents: string[],\n    countryHint?: string,\n    options?: DetectLanguageOptions\n  ): Promise<DetectLanguageResultArray>;\n  /**\n   * Runs a predictive model to determine the language that the passed-in\n   * input document are written in, and returns, for each one, the detected\n   * language as well as a score indicating the model's confidence that the\n   * inferred language is correct.  Scores close to 1 indicate high certainty in\n   * the result.  120 languages are supported.\n   * @param documents - A collection of input documents to analyze.\n   * @param options - Optional parameters for the operation.\n   */\n  public async detectLanguage(\n    documents: DetectLanguageInput[],\n    options?: DetectLanguageOptions\n  ): Promise<DetectLanguageResultArray>;\n  public async detectLanguage(\n    documents: string[] | DetectLanguageInput[],\n    countryHintOrOptions?: string | DetectLanguageOptions,\n    options?: DetectLanguageOptions\n  ): Promise<DetectLanguageResultArray> {\n    let realOptions: DetectLanguageOptions;\n    let realInputs: DetectLanguageInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const countryHint = (countryHintOrOptions as string) || this.defaultCountryHint;\n      realInputs = convertToDetectLanguageInput(documents, countryHint);\n      realOptions = options || {};\n    } else {\n      // Replace \"none\" hints with \"\"\n      realInputs = documents.map((input) => ({\n        ...input,\n        countryHint: input.countryHint === \"none\" ? \"\" : input.countryHint\n      }));\n      realOptions = (countryHintOrOptions as DetectLanguageOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-detectLanguages\",\n      makeGeneratedDetectLanguageOptions(realOptions)\n    );\n\n    try {\n      const result = await this.client.languages(\n        {\n          documents: realInputs\n        },\n        finalOptions\n      );\n\n      return makeDetectLanguageResultArray(realInputs, result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs a predictive model to identify a collection of named entities\n   * in the passed-in input strings, and categorize those entities into types\n   * such as person, location, or organization.  For more information on \n   * available categories, @see\n   * {@link https://docs.microsoft.com/azure/cognitive-services/Text-Analytics/named-entity-types}.\n   * For a list of languages supported by this operation, @see\n   * {@link https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support}.\n   * @param documents - The input strings to analyze.\n   * @param language - The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.  \n        If set to an empty string, the service will apply a model\n        where the language is explicitly set to \"None\".\n   * @param options - Optional parameters for the operation.\n   */\n  public async recognizeEntities(\n    documents: string[],\n    language?: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: RecognizeCategorizedEntitiesOptions\n  ): Promise<RecognizeCategorizedEntitiesResultArray>;\n  /**\n   * Runs a predictive model to identify a collection of named entities\n   * in the passed-in input documents, and categorize those entities into types\n   * such as person, location, or organization.  For more information on\n   * available categories, @see\n   * {@link https://docs.microsoft.com/azure/cognitive-services/Text-Analytics/named-entity-types}.\n   * For a list of languages supported by this operation, @see\n   * {@link https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support}.\n   * @param documents - The input documents to analyze.\n   * @param options - Optional parameters for the operation.\n   */\n  public async recognizeEntities(\n    documents: TextDocumentInput[],\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: RecognizeCategorizedEntitiesOptions\n  ): Promise<RecognizeCategorizedEntitiesResultArray>;\n  public async recognizeEntities(\n    documents: string[] | TextDocumentInput[],\n    languageOrOptions?: string | RecognizeCategorizedEntitiesOptions,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: RecognizeCategorizedEntitiesOptions\n  ): Promise<RecognizeCategorizedEntitiesResultArray> {\n    let realOptions: RecognizeCategorizedEntitiesOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as RecognizeCategorizedEntitiesOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-recognizeEntities\",\n      makeGeneratedRecognizeCategorizedEntitiesOptions(realOptions)\n    );\n\n    try {\n      const result = await this.client.entitiesRecognitionGeneral(\n        {\n          documents: realInputs\n        },\n        finalOptions\n      );\n\n      return makeRecognizeCategorizedEntitiesResultArray(realInputs, result);\n    } catch (e) {\n      /**\n       * This special logic handles REST exception with code\n       * InvalidDocumentBatch and is needed to maintain backward compatability\n       * with sdk v5.0.0 and earlier. In general, REST exceptions are thrown as\n       * is and include both outer and inner exception codes. However, the\n       * earlier versions were throwing an exception that included the inner\n       * code only.\n       */\n      const backwardCompatibleException = handleInvalidDocumentBatch(e);\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: backwardCompatibleException.message\n      });\n      throw backwardCompatibleException;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs a predictive model to identify the positive, negative, neutral, or mixed\n   * sentiment contained in the input strings, as well as scores indicating\n   * the model's confidence in each of the predicted sentiments. Optionally it\n   * can also identify targets in the text and assessments about it through\n   * opinion mining. For a list of languages supported by this operation, @see\n   * {@link https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support}.\n   * @param documents - The input strings to analyze.\n   * @param language - The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.  \n        If set to an empty string, the service will apply a model\n        where the lanuage is explicitly set to \"None\".\n   * @param options - Optional parameters that includes enabling opinion mining.\n   */\n  public async analyzeSentiment(\n    documents: string[],\n    language?: string,\n    options?: AnalyzeSentimentOptions\n  ): Promise<AnalyzeSentimentResultArray>;\n  /**\n   * Runs a predictive model to identify the positive, negative or neutral, or mixed\n   * sentiment contained in the input documents, as well as scores indicating\n   * the model's confidence in each of the predicted sentiments.Optionally it\n   * can also identify targets in the text and assessments about it through\n   * opinion mining. For a list of languages supported by this operation, @see\n   * {@link https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support}.\n   * @param documents - The input documents to analyze.\n   * @param options - Optional parameters that includes enabling opinion mining.\n   */\n  public async analyzeSentiment(\n    documents: TextDocumentInput[],\n    options?: AnalyzeSentimentOptions\n  ): Promise<AnalyzeSentimentResultArray>;\n  public async analyzeSentiment(\n    documents: string[] | TextDocumentInput[],\n    languageOrOptions?: string | AnalyzeSentimentOptions,\n    options?: AnalyzeSentimentOptions\n  ): Promise<AnalyzeSentimentResultArray> {\n    let realOptions: AnalyzeSentimentOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as AnalyzeSentimentOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-analyzeSentiment\",\n      makeGeneratedAnalyzeSentimentOptions(realOptions)\n    );\n\n    try {\n      const result = await this.client.sentiment(\n        {\n          documents: realInputs\n        },\n        finalOptions\n      );\n\n      return makeAnalyzeSentimentResultArray(realInputs, result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs a model to identify a collection of significant phrases\n   * found in the passed-in input strings.\n   * For a list of languages supported by this operation, @see\n   * {@link https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support}.\n   * @param documents - The input strings to analyze.\n   * @param language - The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.  \n        If set to an empty string, the service will apply a model\n        where the language is explicitly set to \"None\".\n   * @param options - Options for the operation.\n   */\n  public async extractKeyPhrases(\n    documents: string[],\n    language?: string,\n    options?: ExtractKeyPhrasesOptions\n  ): Promise<ExtractKeyPhrasesResultArray>;\n  /**\n   * Runs a model to identify a collection of significant phrases\n   * found in the passed-in input documents.\n   * For a list of languages supported by this operation, @see\n   * {@link https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support}.\n   * @param documents - The input documents to analyze.\n   * @param options - Options for the operation.\n   */\n  public async extractKeyPhrases(\n    documents: TextDocumentInput[],\n    options?: ExtractKeyPhrasesOptions\n  ): Promise<ExtractKeyPhrasesResultArray>;\n  public async extractKeyPhrases(\n    documents: string[] | TextDocumentInput[],\n    languageOrOptions?: string | ExtractKeyPhrasesOptions,\n    options?: ExtractKeyPhrasesOptions\n  ): Promise<ExtractKeyPhrasesResultArray> {\n    let realOptions: ExtractKeyPhrasesOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as ExtractKeyPhrasesOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-extractKeyPhrases\",\n      makeGeneratedExtractKeyPhrasesOptions(realOptions)\n    );\n\n    try {\n      const result = await this.client.keyPhrases(\n        {\n          documents: realInputs\n        },\n        finalOptions\n      );\n\n      return makeExtractKeyPhrasesResultArray(realInputs, result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs a predictive model to identify a collection of entities containing\n   * personally identifiable information found in the passed-in input strings,\n   * and categorize those entities into types such as US social security\n   * number, drivers license number, or credit card number.\n   * For a list of languages supported by this operation, @see\n   * {@link https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support}.\n   * @param inputs - The input strings to analyze.\n   * @param language - The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.  \n        If set to an empty string, the service will apply a model\n        where the language is explicitly set to \"None\".\n   * @param options - Options for the operation.\n   */\n  public async recognizePiiEntities(\n    inputs: string[],\n    language?: string,\n    options?: RecognizePiiEntitiesOptions\n  ): Promise<RecognizePiiEntitiesResultArray>;\n  /**\n   * Runs a predictive model to identify a collection of entities containing\n   * personally identifiable information found in the passed-in input documents,\n   * and categorize those entities into types such as US social security\n   * number, drivers license number, or credit card number.\n   * For a list of languages supported by this operation, @see\n   * {@link https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support}.\n   * @param inputs - The input documents to analyze.\n   * @param options - Optional parameters for the operation.\n   */\n  public async recognizePiiEntities(\n    inputs: TextDocumentInput[],\n    options?: RecognizePiiEntitiesOptions\n  ): Promise<RecognizePiiEntitiesResultArray>;\n  public async recognizePiiEntities(\n    inputs: string[] | TextDocumentInput[],\n    languageOrOptions?: string | RecognizePiiEntitiesOptions,\n    options?: RecognizePiiEntitiesOptions\n  ): Promise<RecognizePiiEntitiesResultArray> {\n    let realOptions: RecognizePiiEntitiesOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (isStringArray(inputs)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(inputs, language);\n      realOptions = options || {};\n    } else {\n      realInputs = inputs;\n      realOptions = (languageOrOptions as RecognizePiiEntitiesOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-recognizePiiEntities\",\n      makeGeneratedRecognizePiiEntitiesOptions(realOptions)\n    );\n\n    try {\n      const result = await this.client.entitiesRecognitionPii(\n        {\n          documents: realInputs\n        },\n        finalOptions\n      );\n\n      return makeRecognizePiiEntitiesResultArray(realInputs, result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs a predictive model to identify a collection of entities\n   * found in the passed-in input strings, and include information linking the\n   * entities to their corresponding entries in a well-known knowledge base.\n   * For a list of languages supported by this operation, @see\n   * {@link https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support}.\n   * @param documents - The input strings to analyze.\n   * @param language - The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.  \n        If set to an empty string, the service will apply a model\n        where the language is explicitly set to \"None\".\n   * @param options - Options for the operation.\n   */\n  public async recognizeLinkedEntities(\n    documents: string[],\n    language?: string,\n    options?: RecognizeLinkedEntitiesOptions\n  ): Promise<RecognizeLinkedEntitiesResultArray>;\n  /**\n   * Runs a predictive model to identify a collection of entities\n   * found in the passed-in input documents, and include information linking the\n   * entities to their corresponding entries in a well-known knowledge base.\n   * For a list of languages supported by this operation, @see\n   * {@link https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support}.\n   * @param documents - The input documents to analyze.\n   * @param options - Options for the operation.\n   */\n  public async recognizeLinkedEntities(\n    documents: TextDocumentInput[],\n    options?: RecognizeLinkedEntitiesOptions\n  ): Promise<RecognizeLinkedEntitiesResultArray>;\n  public async recognizeLinkedEntities(\n    documents: string[] | TextDocumentInput[],\n    languageOrOptions?: string | RecognizeLinkedEntitiesOptions,\n    options?: RecognizeLinkedEntitiesOptions\n  ): Promise<RecognizeLinkedEntitiesResultArray> {\n    let realOptions: RecognizeLinkedEntitiesOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as RecognizeLinkedEntitiesOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-recognizeLinkedEntities\",\n      makeGeneratedRecognizeLinkingEntitiesOptions(realOptions)\n    );\n\n    try {\n      const result = await this.client.entitiesLinking(\n        {\n          documents: realInputs\n        },\n        finalOptions\n      );\n\n      return makeRecognizeLinkedEntitiesResultArray(realInputs, result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Start a healthcare analysis operation to recognize healthcare related entities (drugs, conditions,\n   * symptoms, etc) and their relations.\n   * @param documents - Collection of documents to analyze.\n   * @param language - The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.\n        If set to an empty string, the service will apply a model\n        where the language is explicitly set to \"None\".\n   * @param options - Options for the operation.\n   */\n  async beginAnalyzeHealthcareEntities(\n    documents: string[],\n    language?: string,\n    options?: BeginAnalyzeHealthcareEntitiesOptions\n  ): Promise<AnalyzeHealthcareEntitiesPollerLike>;\n  /**\n   * Start a healthcare analysis operation to recognize healthcare related entities (drugs, conditions,\n   * symptoms, etc) and their relations.\n   * @param documents - Collection of documents to analyze.\n   * @param options - Options for the operation.\n   */\n  async beginAnalyzeHealthcareEntities(\n    documents: TextDocumentInput[],\n    options?: BeginAnalyzeHealthcareEntitiesOptions\n  ): Promise<AnalyzeHealthcareEntitiesPollerLike>;\n\n  async beginAnalyzeHealthcareEntities(\n    documents: string[] | TextDocumentInput[],\n    languageOrOptions?: string | BeginAnalyzeHealthcareEntitiesOptions,\n    options?: BeginAnalyzeHealthcareEntitiesOptions\n  ): Promise<AnalyzeHealthcareEntitiesPollerLike> {\n    let realOptions: BeginAnalyzeHealthcareEntitiesOptions;\n    let realInputs: TextDocumentInput[];\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as BeginAnalyzeHealthcareEntitiesOptions) || {};\n    }\n\n    const { updateIntervalInMs, resumeFrom, ...restOptions } = realOptions;\n    const poller = new BeginAnalyzeHealthcarePoller({\n      client: this.client,\n      documents: realInputs,\n      options: restOptions,\n      updateIntervalInMs: updateIntervalInMs,\n      resumeFrom: resumeFrom\n    });\n\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Submit a collection of text documents for analysis. Specify one or more unique actions to be executed.\n   * @param documents - Collection of documents to analyze\n   * @param actions - TextAnalyticsActions to execute.\n   * @param language - The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.\n        If set to an empty string, the service will apply a model\n        where the language is explicitly set to \"None\".\n   * @param options - Options for the operation.\n   */\n  public async beginAnalyzeActions(\n    documents: string[],\n    actions: TextAnalyticsActions,\n    language?: string,\n    options?: BeginAnalyzeActionsOptions\n  ): Promise<AnalyzeActionsPollerLike>;\n  /**\n   * Submit a collection of text documents for analysis. Specify one or more unique actions to be executed.\n   * @param documents - Collection of documents to analyze\n   * @param actions - TextAnalyticsActions to execute.\n   * @param options - Options for the operation.\n   */\n  public async beginAnalyzeActions(\n    documents: TextDocumentInput[],\n    actions: TextAnalyticsActions,\n    options?: BeginAnalyzeActionsOptions\n  ): Promise<AnalyzeActionsPollerLike>;\n  public async beginAnalyzeActions(\n    documents: string[] | TextDocumentInput[],\n    actions: TextAnalyticsActions,\n    languageOrOptions?: string | BeginAnalyzeActionsOptions,\n    options?: BeginAnalyzeActionsOptions\n  ): Promise<AnalyzeActionsPollerLike> {\n    let realOptions: BeginAnalyzeActionsOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as BeginAnalyzeActionsOptions) || {};\n    }\n    validateActions(actions);\n    const compiledActions = compileAnalyzeInput(actions);\n    const { updateIntervalInMs, resumeFrom, ...restOptions } = realOptions;\n    const poller = new BeginAnalyzeActionsPoller({\n      client: this.client,\n      documents: realInputs,\n      actions: compiledActions,\n      options: restOptions,\n      resumeFrom: resumeFrom,\n      updateIntervalInMs: updateIntervalInMs\n    });\n\n    await poller.poll();\n    return poller;\n  }\n}\n\nfunction validateActions(actions: TextAnalyticsActions): void {\n  function validateActionType(actionList: unknown[] | undefined, actionType: string): void {\n    if ((actionList?.length ?? 0) > 1) {\n      throw new Error(\n        `beginAnalyzeActions: Currently, the service can accept up to one action only for ${actionType} actions.`\n      );\n    }\n  }\n  validateActionType(actions.analyzeSentimentActions, `analyzeSentiment`);\n  validateActionType(actions.extractKeyPhrasesActions, `extractKeyPhrases`);\n  validateActionType(actions.recognizeEntitiesActions, `recognizeEntities`);\n  validateActionType(actions.recognizeLinkedEntitiesActions, `recognizeLinkedEntities`);\n  validateActionType(actions.recognizePiiEntitiesActions, `recognizePiiEntities`);\n}\n\n/**\n * @internal\n */\nfunction compileAnalyzeInput(actions: TextAnalyticsActions): GeneratedActions {\n  return {\n    entityRecognitionPiiTasks: actions.recognizePiiEntitiesActions?.map(\n      compose(setStrEncodingParam, compose(setCategoriesFilter, addParamsToTask))\n    ),\n    entityRecognitionTasks: actions.recognizeEntitiesActions?.map(\n      compose(setStrEncodingParam, addParamsToTask)\n    ),\n    keyPhraseExtractionTasks: actions.extractKeyPhrasesActions?.map(addParamsToTask),\n    entityLinkingTasks: actions.recognizeLinkedEntitiesActions?.map(\n      compose(setStrEncodingParam, addParamsToTask)\n    ),\n    sentimentAnalysisTasks: actions.analyzeSentimentActions?.map(\n      compose(setStrEncodingParam, compose(setOpinionMining, addParamsToTask))\n    )\n  };\n}\n\nfunction isStringArray(documents: any[]): documents is string[] {\n  return typeof documents[0] === \"string\";\n}\n\n/**\n * @internal\n */\nfunction convertToDetectLanguageInput(\n  inputs: string[],\n  countryHint: string\n): DetectLanguageInput[] {\n  if (countryHint === \"none\") {\n    countryHint = \"\";\n  }\n  return inputs.map(\n    (text: string, index): DetectLanguageInput => {\n      return {\n        id: String(index),\n        countryHint,\n        text\n      };\n    }\n  );\n}\n\n/**\n * @internal\n */\nfunction convertToTextDocumentInput(inputs: string[], language: string): TextDocumentInput[] {\n  return inputs.map(\n    (text: string, index): TextDocumentInput => {\n      return {\n        id: String(index),\n        language,\n        text\n      };\n    }\n  );\n}\n\n/**\n * Creates the options the service expects for the analyze sentiment API from the user friendly ones.\n * @param params - the user friendly parameters\n * @internal\n */\nfunction makeGeneratedAnalyzeSentimentOptions(\n  params: AnalyzeSentimentOptions\n): GeneratedAnalyzeSentimentOptions {\n  return {\n    abortSignal: params.abortSignal,\n    opinionMining: params.includeOpinionMining,\n    includeStatistics: params.includeStatistics,\n    modelVersion: params.modelVersion,\n    requestOptions: params.requestOptions,\n    stringIndexType: setStrEncodingParamValue(params.stringIndexType),\n    tracingOptions: params.tracingOptions,\n    onResponse: params.onResponse,\n    serializerOptions: params.serializerOptions,\n    loggingOptOut: params.disableServiceLogs\n  };\n}\n\n/**\n * Creates the options the service expects for the recognize pii entities API from the user friendly ones.\n * @param params - the user friendly parameters\n * @internal\n */\nfunction makeGeneratedRecognizePiiEntitiesOptions(\n  params: RecognizePiiEntitiesOptions\n): GeneratedRecognizePiiEntitiesOptions {\n  return {\n    abortSignal: params.abortSignal,\n    domain: params.domainFilter,\n    includeStatistics: params.includeStatistics,\n    modelVersion: params.modelVersion,\n    requestOptions: params.requestOptions,\n    stringIndexType: setStrEncodingParamValue(params.stringIndexType),\n    tracingOptions: params.tracingOptions,\n    piiCategories: params.categoriesFilter,\n    onResponse: params.onResponse,\n    serializerOptions: params.serializerOptions,\n    loggingOptOut: params.disableServiceLogs\n  };\n}\n\n/**\n * Creates the options the service expects for the recognize entities API from the user friendly ones.\n * @param params - the user friendly parameters\n * @internal\n */\nfunction makeGeneratedRecognizeCategorizedEntitiesOptions(\n  params: RecognizeCategorizedEntitiesOptions\n): GeneratedRecognizeCategorizedEntitiesOptions {\n  return {\n    abortSignal: params.abortSignal,\n    includeStatistics: params.includeStatistics,\n    modelVersion: params.modelVersion,\n    requestOptions: params.requestOptions,\n    stringIndexType: setStrEncodingParamValue(params.stringIndexType),\n    tracingOptions: params.tracingOptions,\n    onResponse: params.onResponse,\n    serializerOptions: params.serializerOptions,\n    loggingOptOut: params.disableServiceLogs\n  };\n}\n\n/**\n * Creates the options the service expects for the detect language API from the user friendly ones.\n * @param params - the user friendly parameters\n * @internal\n */\nfunction makeGeneratedDetectLanguageOptions(\n  params: DetectLanguageOptions\n): GeneratedDetectLanguageOptions {\n  return {\n    abortSignal: params.abortSignal,\n    includeStatistics: params.includeStatistics,\n    modelVersion: params.modelVersion,\n    requestOptions: params.requestOptions,\n    tracingOptions: params.tracingOptions,\n    onResponse: params.onResponse,\n    serializerOptions: params.serializerOptions,\n    loggingOptOut: params.disableServiceLogs\n  };\n}\n\n/**\n * Creates the options the service expects for the extract key phrases API from the user friendly ones.\n * @param params - the user friendly parameters\n * @internal\n */\nfunction makeGeneratedExtractKeyPhrasesOptions(\n  params: ExtractKeyPhrasesOptions\n): GeneratedExtractKeyPhrasesOptions {\n  return {\n    abortSignal: params.abortSignal,\n    includeStatistics: params.includeStatistics,\n    modelVersion: params.modelVersion,\n    requestOptions: params.requestOptions,\n    tracingOptions: params.tracingOptions,\n    onResponse: params.onResponse,\n    serializerOptions: params.serializerOptions,\n    loggingOptOut: params.disableServiceLogs\n  };\n}\n\n/**\n * Creates the options the service expects for the recognize linked entities API from the user friendly ones.\n * @param params - the user friendly parameters\n * @internal\n */\nfunction makeGeneratedRecognizeLinkingEntitiesOptions(\n  params: RecognizeLinkedEntitiesOptions\n): GeneratedRecognizeLinkedEntitiesOptions {\n  return {\n    abortSignal: params.abortSignal,\n    includeStatistics: params.includeStatistics,\n    modelVersion: params.modelVersion,\n    requestOptions: params.requestOptions,\n    tracingOptions: params.tracingOptions,\n    onResponse: params.onResponse,\n    serializerOptions: params.serializerOptions,\n    loggingOptOut: params.disableServiceLogs,\n    stringIndexType: setStrEncodingParamValue(params.stringIndexType)\n  };\n}\n"]}