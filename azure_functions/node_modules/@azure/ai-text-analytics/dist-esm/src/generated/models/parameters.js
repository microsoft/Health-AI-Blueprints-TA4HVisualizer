/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { AnalyzeBatchInput as AnalyzeBatchInputMapper, MultiLanguageBatchInput as MultiLanguageBatchInputMapper, LanguageBatchInput as LanguageBatchInputMapper } from "../models/mappers";
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const body = {
    parameterPath: ["options", "body"],
    mapper: AnalyzeBatchInputMapper
};
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json, text/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const endpoint = {
    parameterPath: "endpoint",
    mapper: {
        serializedName: "Endpoint",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "v3.1",
        isConstant: true,
        serializedName: "ApiVersion",
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const jobId = {
    parameterPath: "jobId",
    mapper: {
        serializedName: "jobId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const includeStatistics = {
    parameterPath: ["options", "includeStatistics"],
    mapper: {
        serializedName: "showStats",
        type: {
            name: "Boolean"
        }
    }
};
export const top = {
    parameterPath: ["options", "top"],
    mapper: {
        defaultValue: 20,
        constraints: {
            InclusiveMaximum: 50,
            InclusiveMinimum: 1
        },
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
export const skip = {
    parameterPath: ["options", "skip"],
    mapper: {
        constraints: {
            InclusiveMinimum: 0
        },
        serializedName: "$skip",
        type: {
            name: "Number"
        }
    }
};
export const jobId1 = {
    parameterPath: "jobId",
    mapper: {
        serializedName: "jobId",
        required: true,
        type: {
            name: "Uuid"
        }
    }
};
export const input = {
    parameterPath: "input",
    mapper: MultiLanguageBatchInputMapper
};
export const modelVersion = {
    parameterPath: ["options", "modelVersion"],
    mapper: {
        serializedName: "model-version",
        type: {
            name: "String"
        }
    }
};
export const stringIndexType = {
    parameterPath: ["options", "stringIndexType"],
    mapper: {
        serializedName: "stringIndexType",
        type: {
            name: "String"
        }
    }
};
export const loggingOptOut = {
    parameterPath: ["options", "loggingOptOut"],
    mapper: {
        serializedName: "loggingOptOut",
        type: {
            name: "Boolean"
        }
    }
};
export const domain = {
    parameterPath: ["options", "domain"],
    mapper: {
        serializedName: "domain",
        type: {
            name: "String"
        }
    }
};
export const piiCategories = {
    parameterPath: ["options", "piiCategories"],
    mapper: {
        constraints: {
            UniqueItems: true
        },
        serializedName: "piiCategories",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: "CSV"
};
export const input1 = {
    parameterPath: "input",
    mapper: LanguageBatchInputMapper
};
export const opinionMining = {
    parameterPath: ["options", "opinionMining"],
    mapper: {
        serializedName: "opinionMining",
        type: {
            name: "Boolean"
        }
    }
};
//# sourceMappingURL=parameters.js.map