{"version":3,"file":"poller.js","sourceRoot":"","sources":["../../../src/lro/poller.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,MAAM,EAAqC,MAAM,iBAAiB,CAAC;AAG5E,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AA8ChC;;;GAGG;AACH,MAAM,OAAgB,cAAgC,SAAQ,MAAuB;IAArF;;QACE;;WAEG;QACI,uBAAkB,GAAW,IAAI,CAAC;IAQ3C,CAAC;IANC;;OAEG;IACH,KAAK,CAAC,KAAK;QACT,OAAO,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IACxC,CAAC;CACF;AAED;;;GAGG;AACH,MAAM,OAAgB,qBAAqB;IAEzC,YAAmB,KAAa;QAAb,UAAK,GAAL,KAAK,CAAQ;IAAG,CAAC;IAcpC;;OAEG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,SAAS,CAAC;YACpB,KAAK,EAAE,IAAI,CAAC,KAAK;SAClB,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Poller, PollOperation, PollOperationState } from \"@azure/core-lro\";\nimport { GeneratedClient } from \"../generated/generatedClient\";\nimport { State, TextDocumentInput } from \"../generated/models\";\nimport { delay } from \"../util\";\n\n/**\n * Common parameters to a Poller.\n * @internal\n */\nexport interface AnalysisPollerOptions {\n  readonly client: GeneratedClient;\n  readonly documents: TextDocumentInput[];\n  updateIntervalInMs?: number;\n  resumeFrom?: string;\n}\n\n/**\n * Metadata information for an analysis poller operation.\n */\nexport interface OperationMetadata {\n  /**\n   * The date and time the operation was created.\n   */\n  createdOn: Date;\n  /**\n   * The date and time when the operation results will expire on the server.\n   */\n  expiresOn?: Date;\n  /**\n   * The operation id.\n   */\n  operationId: string;\n  /**\n   * The time the operation status was last updated.\n   */\n  lastModifiedOn: Date;\n  /**\n   * The current status of the operation.\n   */\n  status: State;\n}\n\n/**\n * An interface representing the state of an analysis poller operation.\n */\nexport interface AnalysisPollOperationState<TResult>\n  extends PollOperationState<TResult>,\n    OperationMetadata {}\n\n/**\n * Common properties and methods of analysis Pollers.\n * @internal\n */\nexport abstract class AnalysisPoller<TState, TResult> extends Poller<TState, TResult> {\n  /**\n   * Defines how much time the poller is going to wait before making a new request to the service.\n   */\n  public updateIntervalInMs: number = 2000;\n\n  /**\n   * The method used by the poller to wait before attempting to update its operation.\n   */\n  async delay(): Promise<void> {\n    return delay(this.updateIntervalInMs);\n  }\n}\n\n/**\n * Common properties and methods of polling operations.\n * @internal\n */\nexport abstract class AnalysisPollOperation<TState, TResult>\n  implements PollOperation<TState, TResult> {\n  constructor(public state: TState) {}\n\n  /**\n   * Meant to reach to the service and update the Poller operation.\n   * @param options - The optional parameters, which is only an abortSignal from \\@azure/abort-controller\n   */\n  public abstract update(): Promise<PollOperation<TState, TResult>>;\n\n  /**\n   * Meant to reach to the service and cancel the Poller operation.\n   * @param options - The optional parameters, which is only an abortSignal from \\@azure/abort-controller\n   */\n  public abstract cancel(): Promise<PollOperation<TState, TResult>>;\n\n  /**\n   * Serializes the Poller operation.\n   */\n  public toString(): string {\n    return JSON.stringify({\n      state: this.state\n    });\n  }\n}\n"]}