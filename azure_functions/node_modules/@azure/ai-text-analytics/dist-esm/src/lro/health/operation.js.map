{"version":3,"file":"operation.js","sourceRoot":"","sources":["../../../../src/lro/health/operation.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { OperationOptions } from \"@azure/core-client\";\n\nimport {\n  GeneratedClientHealthResponse as BeginAnalyzeHealthcareResponse,\n  GeneratedClientHealthStatusOptionalParams as HealthcareJobStatusOptions,\n  HealthcareJobState,\n  State,\n  TextDocumentBatchStatistics,\n  TextDocumentInput\n} from \"../../generated/models\";\nimport {\n  AnalyzeHealthcareEntitiesResult,\n  AnalyzeHealthcareEntitiesResultArray,\n  PagedAsyncIterableAnalyzeHealthcareEntitiesResult,\n  PagedAnalyzeHealthcareEntitiesResult,\n  makeHealthcareEntitiesResult,\n  makeHealthcareEntitiesErrorResult\n} from \"../../analyzeHealthcareEntitiesResult\";\nimport { PageSettings } from \"@azure/core-paging\";\nimport {\n  addStrEncodingParam,\n  getOperationId,\n  handleInvalidDocumentBatch,\n  nextLinkToTopAndSkip,\n  StringIndexType\n} from \"../../util\";\nimport {\n  AnalysisPollOperation,\n  AnalysisPollOperationState,\n  OperationMetadata as AnalyzeHealthcareEntitiesOperationMetadata\n} from \"../poller\";\nimport { GeneratedClient as Client } from \"../../generated\";\nimport { processAndCombineSuccessfulAndErroneousDocuments } from \"../../textAnalyticsResult\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { createSpan } from \"../../tracing\";\nimport { TextAnalyticsOperationOptions } from \"../../textAnalyticsOperationOptions\";\nexport { State };\n\n/**\n * @internal\n */\ninterface AnalyzeHealthcareEntitiesResultWithPagination {\n  result: AnalyzeHealthcareEntitiesResultArray;\n  top?: number;\n  skip?: number;\n}\n\n/**\n * @internal\n */\ninterface HealthcareJobStatus {\n  done: boolean;\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion?: string;\n  operationMetdata: Omit<AnalyzeHealthcareEntitiesOperationMetadata, \"operationId\">;\n}\n\n/**\n * @internal\n */\ninterface BeginAnalyzeHealthcareInternalOptions extends OperationOptions {\n  /**\n   * This value indicates which model will be used for scoring. If a model-version is\n   * not specified, the API should default to the latest, non-preview version.\n   * For supported model versions, see operation-specific documentation, for example:\n   * https://docs.microsoft.com/azure/cognitive-services/text-analytics/how-tos/text-analytics-how-to-sentiment-analysis#model-versioning\n   */\n  modelVersion?: string;\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties.\n   * Possible units are \"TextElements_v8\", \"UnicodeCodePoint\", and \"Utf16CodeUnit\".\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n  /**\n   * If set to false, you opt-in to have your text input logged for troubleshooting. By default, Text Analytics\n   * will not log your input text for healthcare entities analysis. Setting this parameter to false,\n   * enables input logging.\n   */\n  loggingOptOut?: boolean;\n}\n\n/**\n * Options for the begin analyze healthcare entities operation.\n */\nexport interface BeginAnalyzeHealthcareEntitiesOptions extends TextAnalyticsOperationOptions {\n  /**\n   * Delay to wait until next poll, in milliseconds.\n   */\n  stringIndexType?: StringIndexType;\n  /**\n   * Delay to wait until next poll, in milliseconds.\n   */\n  updateIntervalInMs?: number;\n  /**\n   * A serialized poller which can be used to resume an existing paused Long-Running-Operation.\n   */\n  resumeFrom?: string;\n}\n\n/**\n * The state of the begin analyze healthcare polling operation.\n */\nexport interface AnalyzeHealthcareOperationState\n  extends AnalysisPollOperationState<PagedAnalyzeHealthcareEntitiesResult> {}\n\n/**\n * @internal\n */\nfunction getMetaInfoFromResponse(\n  response: HealthcareJobState\n): Omit<AnalyzeHealthcareEntitiesOperationMetadata, \"operationId\"> {\n  return {\n    createdOn: response.createdDateTime,\n    lastModifiedOn: response.lastUpdateDateTime,\n    expiresOn: response.expirationDateTime,\n    status: response.status\n  };\n}\n\n/**\n * Class that represents a poller that waits for the healthcare results.\n * @internal\n */\nexport class BeginAnalyzeHealthcarePollerOperation extends AnalysisPollOperation<\n  AnalyzeHealthcareOperationState,\n  PagedAnalyzeHealthcareEntitiesResult\n> {\n  constructor(\n    public state: AnalyzeHealthcareOperationState,\n    // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n    private client: Client,\n    private documents: TextDocumentInput[],\n    private options: BeginAnalyzeHealthcareEntitiesOptions = {}\n  ) {\n    super(state);\n  }\n\n  /**\n   * should be called only after all the status of the healthcare operations became\n   * \"succeeded\" and it returns an iterator for the results and provides a\n   * byPage method to return the results paged.\n   */\n  private listHealthcareEntitiesByPage(\n    operationId: string,\n    options: HealthcareJobStatusOptions = {}\n  ): PagedAsyncIterableAnalyzeHealthcareEntitiesResult {\n    const iter = this._listHealthcareEntities(operationId, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        const pageOptions = { ...options, top: settings?.maxPageSize };\n        return this._listHealthcareEntitiesPaged(operationId, pageOptions);\n      }\n    };\n  }\n\n  /**\n   * returns an iterator to the results of a healthcare operation.\n   */\n  private async *_listHealthcareEntities(\n    operationId: string,\n    options?: HealthcareJobStatusOptions\n  ): AsyncIterableIterator<AnalyzeHealthcareEntitiesResult> {\n    for await (const page of this._listHealthcareEntitiesPaged(operationId, options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * returns an iterator to arrays of the results of a healthcare operation.\n   */\n  private async *_listHealthcareEntitiesPaged(\n    operationId: string,\n    options?: HealthcareJobStatusOptions\n  ): AsyncIterableIterator<AnalyzeHealthcareEntitiesResultArray> {\n    let response = await this._listHealthcareEntitiesSinglePage(operationId, options);\n    yield response.result;\n    while (response.skip) {\n      const optionsWithContinuation: HealthcareJobStatusOptions = {\n        ...options,\n        top: response.top,\n        skip: response.skip\n      };\n      response = await this._listHealthcareEntitiesSinglePage(operationId, optionsWithContinuation);\n      yield response.result;\n    }\n  }\n\n  /**\n   * returns an iterator to arrays of the sorted results of a healthcare operation.\n   */\n  private async _listHealthcareEntitiesSinglePage(\n    operationId: string,\n    options?: HealthcareJobStatusOptions\n  ): Promise<AnalyzeHealthcareEntitiesResultWithPagination> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-_listHealthcareEntitiesSinglePage\",\n      options || {}\n    );\n    try {\n      const response = await this.client.healthStatus(operationId, finalOptions);\n      if (response.results) {\n        const result = processAndCombineSuccessfulAndErroneousDocuments(\n          this.documents,\n          response.results,\n          makeHealthcareEntitiesResult,\n          makeHealthcareEntitiesErrorResult\n        );\n        return response.nextLink\n          ? { result, ...nextLinkToTopAndSkip(response.nextLink) }\n          : { result };\n      } else {\n        throw new Error(\"Healthcare action has succeeded but the there are no results!\");\n      }\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * returns whether the healthcare operation is done and if so returns also\n   * statistics and the model version used.\n   */\n  private async getHealthStatus(\n    operationId: string,\n    options?: HealthcareJobStatusOptions\n  ): Promise<HealthcareJobStatus> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-getHealthStatus\",\n      options || {}\n    );\n    try {\n      const response = await this.client.healthStatus(operationId, finalOptions);\n      switch (response.status) {\n        case \"notStarted\":\n        case \"running\":\n          break;\n        case \"failed\": {\n          const errors = response.errors\n            ?.map((e) => `  code ${e.code}, message: '${e.message}'`)\n            .join(\"\\n\");\n          const message = `Healthcare analysis failed. Error(s): ${errors || \"\"}`;\n          throw new Error(message);\n        }\n        default: {\n          if (response.results) {\n            return {\n              done: true,\n              statistics: response.results.statistics,\n              modelVersion: response.results.modelVersion,\n              operationMetdata: getMetaInfoFromResponse(response)\n            };\n          } else {\n            throw new Error(\"Healthcare action has finished but the there are no results!\");\n          }\n        }\n      }\n      return { done: false, operationMetdata: getMetaInfoFromResponse(response) };\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async beginAnalyzeHealthcare(\n    documents: TextDocumentInput[],\n    options?: BeginAnalyzeHealthcareInternalOptions\n  ): Promise<BeginAnalyzeHealthcareResponse> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-beginAnalyzeHealthcare\",\n      addStrEncodingParam(options || {})\n    );\n\n    try {\n      return await this.client.health({ documents: documents }, finalOptions);\n    } catch (e) {\n      const exception = handleInvalidDocumentBatch(e);\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: exception.message\n      });\n      throw exception;\n    } finally {\n      span.end();\n    }\n  }\n\n  async update(\n    options: {\n      abortSignal?: AbortSignalLike;\n      fireProgress?: (state: AnalyzeHealthcareOperationState) => void;\n    } = {}\n  ): Promise<BeginAnalyzeHealthcarePollerOperation> {\n    const state = this.state;\n    const updatedAbortSignal = options.abortSignal;\n    if (!state.isStarted) {\n      state.isStarted = true;\n      const response = await this.beginAnalyzeHealthcare(this.documents, {\n        requestOptions: this.options.requestOptions,\n        tracingOptions: this.options.tracingOptions,\n        abortSignal: updatedAbortSignal ? updatedAbortSignal : options.abortSignal,\n        modelVersion: this.options.modelVersion,\n        stringIndexType: this.options.stringIndexType,\n        loggingOptOut: this.options.disableServiceLogs\n      });\n      if (!response.operationLocation) {\n        throw new Error(\n          \"Expects a valid 'operationLocation' to retrieve health results but did not find any\"\n        );\n      }\n      state.operationId = getOperationId(response.operationLocation);\n    }\n    const operationStatus = await this.getHealthStatus(state.operationId!, {\n      abortSignal: updatedAbortSignal ? updatedAbortSignal : options.abortSignal,\n      includeStatistics: this.options.includeStatistics,\n      tracingOptions: this.options.tracingOptions,\n      onResponse: this.options.onResponse,\n      serializerOptions: this.options.serializerOptions\n    });\n\n    state.createdOn = operationStatus.operationMetdata.createdOn;\n    state.expiresOn = operationStatus.operationMetdata.expiresOn;\n    state.lastModifiedOn = operationStatus.operationMetdata.lastModifiedOn;\n    state.status = operationStatus.operationMetdata.status;\n\n    if (!state.isCompleted && operationStatus.done) {\n      const pagedIterator = this.listHealthcareEntitiesByPage(state.operationId!, {\n        abortSignal: this.options.abortSignal,\n        tracingOptions: this.options.tracingOptions\n      });\n      state.result = Object.assign(pagedIterator, {\n        statistics: operationStatus.statistics,\n        modelVersion: operationStatus.modelVersion!\n      });\n      state.isCompleted = true;\n    }\n    if (typeof options.fireProgress === \"function\") {\n      options.fireProgress(state);\n    }\n    return this;\n  }\n\n  async cancel(): Promise<BeginAnalyzeHealthcarePollerOperation> {\n    const state = this.state;\n    if (state.operationId) {\n      await this.client.cancelHealthJob(state.operationId, {\n        abortSignal: this.options.abortSignal,\n        tracingOptions: this.options.tracingOptions\n      });\n    }\n    state.isCancelled = true;\n    return this;\n  }\n}\n"]}