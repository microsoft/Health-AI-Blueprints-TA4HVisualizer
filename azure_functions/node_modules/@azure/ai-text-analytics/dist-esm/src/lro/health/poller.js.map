{"version":3,"file":"poller.js","sourceRoot":"","sources":["../../../../src/lro/health/poller.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,OAAO,EAAE,KAAK,EAAE,MAAM,YAAY,CAAC;AAEnC,OAAO,EAAE,cAAc,EAAyB,MAAM,WAAW,CAAC;AAClE,OAAO,EACL,qCAAqC,EAGtC,MAAM,aAAa,CAAC;AAiBrB;;;GAGG;AACH,MAAM,OAAO,4BAA6B,SAAQ,cAGjD;IACC,wEAAwE;IACxE,YAAY,MAA+B;QACzC,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,kBAAkB,GAAG,IAAI,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;QAErF,IAAI,KAAkD,CAAC;QAEvD,IAAI,UAAU,EAAE;YACd,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;SACtC;QACD,MAAM,SAAS,GAAG,IAAI,qCAAqC,CACzD,CAAC,KAAK,IAAI,EAAE,CAAQ,EACpB,MAAM,EACN,SAAS,EACT,OAAO,CACR,CAAC;QAEF,KAAK,CAAC,SAAS,CAAC,CAAC;QAEjB,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;IAC/C,CAAC;IAEM,KAAK;QACV,OAAO,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IACxC,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PollerLike } from \"@azure/core-lro\";\nimport { PagedAnalyzeHealthcareEntitiesResult } from \"../../analyzeHealthcareEntitiesResult\";\nimport { delay } from \"../../util\";\n\nimport { AnalysisPoller, AnalysisPollerOptions } from \"../poller\";\nimport {\n  BeginAnalyzeHealthcarePollerOperation,\n  AnalyzeHealthcareOperationState,\n  BeginAnalyzeHealthcareEntitiesOptions\n} from \"./operation\";\n\n/**\n * @internal\n */\nexport interface HealthcarePollerOptions extends AnalysisPollerOptions {\n  readonly options?: BeginAnalyzeHealthcareEntitiesOptions;\n}\n\n/**\n * Result type of the Health Long-Running-Operation (LRO)\n */\nexport type AnalyzeHealthcareEntitiesPollerLike = PollerLike<\n  AnalyzeHealthcareOperationState,\n  PagedAnalyzeHealthcareEntitiesResult\n>;\n\n/**\n * Class that represents a poller that waits for the healthcare results.\n * @internal\n */\nexport class BeginAnalyzeHealthcarePoller extends AnalysisPoller<\n  AnalyzeHealthcareOperationState,\n  PagedAnalyzeHealthcareEntitiesResult\n> {\n  // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n  constructor(inputs: HealthcarePollerOptions) {\n    const { client, documents, options, updateIntervalInMs = 5000, resumeFrom } = inputs;\n\n    let state: AnalyzeHealthcareOperationState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n    const operation = new BeginAnalyzeHealthcarePollerOperation(\n      (state || {}) as any,\n      client,\n      documents,\n      options\n    );\n\n    super(operation);\n\n    this.updateIntervalInMs = updateIntervalInMs;\n  }\n\n  public delay(): Promise<void> {\n    return delay(this.updateIntervalInMs);\n  }\n}\n"]}