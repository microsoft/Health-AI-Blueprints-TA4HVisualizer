{"version":3,"file":"poller.js","sourceRoot":"","sources":["../../../../src/lro/analyze/poller.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAKlC,OAAO,EAAE,KAAK,EAAE,MAAM,YAAY,CAAC;AAEnC,OAAO,EAAE,cAAc,EAAyB,MAAM,WAAW,CAAC;AAClE,OAAO,EACL,kCAAkC,EAGnC,MAAM,aAAa,CAAC;AAkBrB;;;GAGG;AACH,MAAM,OAAO,yBAA0B,SAAQ,cAG9C;IACC,wEAAwE;IACxE,YAAY,aAA0C;QACpD,MAAM,EACJ,MAAM,EACN,SAAS,EACT,OAAO,EACP,OAAO,EACP,kBAAkB,GAAG,IAAI,EACzB,UAAU,EACX,GAAG,aAAa,CAAC;QAElB,IAAI,KAA+C,CAAC;QAEpD,IAAI,UAAU,EAAE;YACd,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;SACtC;QACD,MAAM,SAAS,GAAG,IAAI,kCAAkC,CACtD,CAAC,KAAK,IAAI,EAAE,CAAQ,EACpB,MAAM,EACN,SAAS,EACT,OAAO,EACP,OAAO,CACR,CAAC;QAEF,KAAK,CAAC,SAAS,CAAC,CAAC;QAEjB,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;IAC/C,CAAC;IAEM,KAAK;QACV,OAAO,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IACxC,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PollerLike } from \"@azure/core-lro\";\nimport { PagedAnalyzeActionsResult } from \"../../analyzeActionsResult\";\nimport { JobManifestTasks as GeneratedActions } from \"../../generated/models\";\nimport { delay } from \"../../util\";\n\nimport { AnalysisPoller, AnalysisPollerOptions } from \"../poller\";\nimport {\n  BeginAnalyzeActionsPollerOperation,\n  AnalyzeActionsOperationState,\n  BeginAnalyzeActionsOptions\n} from \"./operation\";\n\n/**\n * @internal\n */\nexport interface AnalyzeActionsPollerOptions extends AnalysisPollerOptions {\n  actions: GeneratedActions;\n  readonly options: BeginAnalyzeActionsOptions;\n}\n\n/**\n * Result type of the Begin Analyze Actions Long-Running-Operation (LRO).\n */\nexport type AnalyzeActionsPollerLike = PollerLike<\n  AnalyzeActionsOperationState,\n  PagedAnalyzeActionsResult\n>;\n\n/**\n * Class that represents a poller that waits for the analyze actions results.\n * @internal\n */\nexport class BeginAnalyzeActionsPoller extends AnalysisPoller<\n  AnalyzeActionsOperationState,\n  PagedAnalyzeActionsResult\n> {\n  // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n  constructor(pollerOptions: AnalyzeActionsPollerOptions) {\n    const {\n      client,\n      documents,\n      actions,\n      options,\n      updateIntervalInMs = 5000,\n      resumeFrom\n    } = pollerOptions;\n\n    let state: AnalyzeActionsOperationState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n    const operation = new BeginAnalyzeActionsPollerOperation(\n      (state || {}) as any,\n      client,\n      documents,\n      actions,\n      options\n    );\n\n    super(operation);\n\n    this.updateIntervalInMs = updateIntervalInMs;\n  }\n\n  public delay(): Promise<void> {\n    return delay(this.updateIntervalInMs);\n  }\n}\n"]}