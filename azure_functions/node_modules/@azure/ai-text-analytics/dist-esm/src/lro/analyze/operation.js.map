{"version":3,"file":"operation.js","sourceRoot":"","sources":["../../../../src/lro/analyze/operation.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationOptions } from \"@azure/core-client\";\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\n\nimport {\n  AnalyzeJobState,\n  GeneratedClientAnalyzeResponse as BeginAnalyzeResponse,\n  GeneratedClientAnalyzeStatusOptionalParams as AnalyzeActionsOperationStatusOptions,\n  JobManifestTasks as GeneratedActions,\n  State,\n  TextDocumentBatchStatistics,\n  TextDocumentInput\n} from \"../../generated/models\";\nimport {\n  AnalyzeActionsResult,\n  PagedAsyncIterableAnalyzeActionsResult,\n  PagedAnalyzeActionsResult,\n  createAnalyzeActionsResult\n} from \"../../analyzeActionsResult\";\nimport { PageSettings } from \"@azure/core-paging\";\nimport { getOperationId, handleInvalidDocumentBatch, nextLinkToTopAndSkip } from \"../../util\";\nimport { AnalysisPollOperation, AnalysisPollOperationState, OperationMetadata } from \"../poller\";\nimport { GeneratedClient as Client } from \"../../generated\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { createSpan } from \"../../tracing\";\nimport { logger } from \"../../logger\";\nexport { State };\n\n/**\n * @internal\n */\ninterface AnalyzeResultsWithPagination {\n  result: AnalyzeActionsResult;\n  top?: number;\n  skip?: number;\n}\n\n/**\n * The metadata for beginAnalyzeActions operations.\n */\nexport interface AnalyzeActionsOperationMetadata extends OperationMetadata {\n  /**\n   * Number of successfully completed actions.\n   */\n  actionsSucceededCount: number;\n  /**\n   * Number of failed actions.\n   */\n  actionsFailedCount: number;\n  /**\n   * Number of actions still in progress.\n   */\n  actionsInProgressCount: number;\n  /**\n   * The operation's display name.\n   */\n  displayName?: string;\n}\n\n/**\n * @internal\n */\ninterface AnalyzeActionsOperationStatus {\n  done: boolean;\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  operationMetdata: Omit<AnalyzeActionsOperationMetadata, \"operationId\">;\n}\n\n/**\n * @internal\n */\ninterface BeginAnalyzeInternalOptions extends OperationOptions {\n  displayName?: string;\n}\n\n/**\n * Options for the begin analyze actions operation.\n */\nexport interface BeginAnalyzeActionsOptions extends OperationOptions {\n  /**\n   * Delay to wait until next poll, in milliseconds.\n   */\n  updateIntervalInMs?: number;\n  /**\n   * A serialized poller which can be used to resume an existing paused Long-Running-Operation.\n   */\n  resumeFrom?: string;\n  /**\n   * If set to true, response will contain input and document level statistics.\n   */\n  includeStatistics?: boolean;\n  /**\n   * The operation's display name.\n   */\n  displayName?: string;\n}\n\n/**\n * The state of the begin analyze polling operation.\n */\nexport interface AnalyzeActionsOperationState\n  extends AnalysisPollOperationState<PagedAnalyzeActionsResult>,\n    AnalyzeActionsOperationMetadata {}\n\n/**\n * @internal\n */\nfunction getMetaInfoFromResponse(\n  response: AnalyzeJobState\n): Omit<AnalyzeActionsOperationMetadata, \"operationId\"> {\n  return {\n    createdOn: response.createdDateTime,\n    lastModifiedOn: response.lastUpdateDateTime,\n    expiresOn: response.expirationDateTime,\n    status: response.status,\n    actionsSucceededCount: response.tasks.completed,\n    actionsFailedCount: response.tasks.failed,\n    actionsInProgressCount: response.tasks.inProgress,\n    displayName: response.displayName\n  };\n}\n\n/**\n * Class that represents a poller that waits for results of the analyze\n * operation.\n * @internal\n */\nexport class BeginAnalyzeActionsPollerOperation extends AnalysisPollOperation<\n  AnalyzeActionsOperationState,\n  PagedAnalyzeActionsResult\n> {\n  constructor(\n    public state: AnalyzeActionsOperationState,\n    // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n    private client: Client,\n    private documents: TextDocumentInput[],\n    private actions: GeneratedActions,\n    private options: BeginAnalyzeActionsOptions = {}\n  ) {\n    super(state);\n  }\n\n  /**\n   * should be called only after all the status of the analyze actions operations became\n   * \"succeeded\" and it returns an iterator for the results and provides a\n   * byPage method to return the results paged.\n   */\n  private listAnalyzeActionsResults(\n    operationId: string,\n    options: AnalyzeActionsOperationStatusOptions = {}\n  ): PagedAsyncIterableAnalyzeActionsResult {\n    const iter = this._listAnalyzeActionsResultsPaged(operationId, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        const pageOptions = { ...options, top: settings?.maxPageSize };\n        return this._listAnalyzeActionsResultsPaged(operationId, pageOptions);\n      }\n    };\n  }\n\n  /**\n   * returns an iterator to arrays of the results of an analyze actions operation.\n   */\n  private async *_listAnalyzeActionsResultsPaged(\n    operationId: string,\n    options?: AnalyzeActionsOperationStatusOptions\n  ): AsyncIterableIterator<AnalyzeActionsResult> {\n    let response = await this._listAnalyzeActionsResultsSinglePage(operationId, options);\n    yield response.result;\n    while (response.skip) {\n      const optionsWithContinuation: AnalyzeActionsOperationStatusOptions = {\n        ...options,\n        top: response.top,\n        skip: response.skip\n      };\n      response = await this._listAnalyzeActionsResultsSinglePage(\n        operationId,\n        optionsWithContinuation\n      );\n      yield response.result;\n    }\n  }\n\n  /**\n   * returns an iterator to arrays of the sorted results of an analyze actions operation.\n   */\n  private async _listAnalyzeActionsResultsSinglePage(\n    operationId: string,\n    options?: AnalyzeActionsOperationStatusOptions\n  ): Promise<AnalyzeResultsWithPagination> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-_listAnalyzeActionsResultsSinglePage\",\n      options || {}\n    );\n    try {\n      const response = await this.client.analyzeStatus(operationId, finalOptions);\n      const result = createAnalyzeActionsResult(response, this.documents);\n      return response.nextLink\n        ? { result, ...nextLinkToTopAndSkip(response.nextLink) }\n        : { result };\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * returns whether the analyze actions operation is done and if so returns also\n   * statistics.\n   */\n  private async getAnalyzeActionsOperationStatus(\n    operationId: string,\n    options?: AnalyzeActionsOperationStatusOptions\n  ): Promise<AnalyzeActionsOperationStatus> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-getAnalyzeActionsOperationStatus\",\n      options || {}\n    );\n    try {\n      const response = await this.client.analyzeStatus(operationId, finalOptions);\n      switch (response.status) {\n        case \"notStarted\":\n        case \"running\":\n          break;\n        default: {\n          return {\n            done: true,\n            statistics: response.statistics,\n            operationMetdata: getMetaInfoFromResponse(response)\n          };\n        }\n      }\n      return { done: false, operationMetdata: getMetaInfoFromResponse(response) };\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async beginAnalyzeActions(\n    documents: TextDocumentInput[],\n    actions: GeneratedActions,\n    options?: BeginAnalyzeInternalOptions\n  ): Promise<BeginAnalyzeResponse> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-beginAnalyze\",\n      options || {}\n    );\n\n    try {\n      return await this.client.analyze({\n        body: {\n          analysisInput: { documents: documents },\n          tasks: actions,\n          displayName: options?.displayName\n        },\n        ...finalOptions\n      });\n    } catch (e) {\n      const exception = handleInvalidDocumentBatch(e);\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: exception.message\n      });\n      throw exception;\n    } finally {\n      span.end();\n    }\n  }\n\n  async update(\n    options: {\n      abortSignal?: AbortSignalLike;\n      fireProgress?: (state: AnalyzeActionsOperationState) => void;\n    } = {}\n  ): Promise<BeginAnalyzeActionsPollerOperation> {\n    const state = this.state;\n    const updatedAbortSignal = options.abortSignal;\n    if (!state.isStarted) {\n      state.isStarted = true;\n      const response = await this.beginAnalyzeActions(this.documents, this.actions, {\n        displayName: this.options.displayName,\n        tracingOptions: this.options.tracingOptions,\n        requestOptions: this.options.requestOptions,\n        abortSignal: updatedAbortSignal ? updatedAbortSignal : this.options.abortSignal\n      });\n      if (!response.operationLocation) {\n        throw new Error(\n          \"Expects a valid 'operationLocation' to retrieve analyze results but did not find any\"\n        );\n      }\n      state.operationId = getOperationId(response.operationLocation);\n    }\n\n    const operationStatus = await this.getAnalyzeActionsOperationStatus(state.operationId!, {\n      abortSignal: updatedAbortSignal ? updatedAbortSignal : options.abortSignal,\n      includeStatistics: this.options.includeStatistics,\n      tracingOptions: this.options.tracingOptions\n    });\n\n    state.createdOn = operationStatus.operationMetdata.createdOn;\n    state.expiresOn = operationStatus.operationMetdata.expiresOn;\n    state.lastModifiedOn = operationStatus.operationMetdata.lastModifiedOn;\n    state.status = operationStatus.operationMetdata.status;\n    state.actionsSucceededCount = operationStatus.operationMetdata.actionsSucceededCount;\n    state.actionsFailedCount = operationStatus.operationMetdata.actionsFailedCount;\n    state.actionsInProgressCount = operationStatus.operationMetdata.actionsInProgressCount;\n    state.displayName = operationStatus.operationMetdata?.displayName;\n\n    if (!state.isCompleted && operationStatus.done) {\n      const pagedIterator = this.listAnalyzeActionsResults(state.operationId!, {\n        abortSignal: this.options.abortSignal,\n        tracingOptions: this.options.tracingOptions,\n        includeStatistics: this.options.includeStatistics,\n        onResponse: this.options.onResponse,\n        serializerOptions: this.options.serializerOptions\n      });\n      // Attach stats if the service starts to return them\n      // https://github.com/Azure/azure-sdk-for-js/issues/14139\n      // state.result = Object.assign(pagedIterator, {\n      //   statistics: operationStatus.statistics\n      // });\n      state.result = pagedIterator;\n      state.isCompleted = true;\n    }\n\n    if (typeof options.fireProgress === \"function\") {\n      options.fireProgress(state);\n    }\n    return this;\n  }\n\n  async cancel(): Promise<BeginAnalyzeActionsPollerOperation> {\n    const state = this.state;\n    logger.warning(`The service does not yet support cancellation for beginAnalyze.`);\n    state.isCancelled = true;\n    return this;\n  }\n}\n"]}