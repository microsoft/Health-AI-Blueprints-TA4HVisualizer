{"version":3,"file":"textAnalyticsResult.js","sourceRoot":"","sources":["../../src/textAnalyticsResult.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAalC,OAAO,EAAE,qBAAqB,EAAE,MAAM,QAAQ,CAAC;AAwH/C;;;;GAIG;AACH,MAAM,UAAU,sBAAsB,CACpC,UAAyD;IAEzD,wDAAwD;IACxD,8BAA8B;IAC9B,IAAI,UAAU,CAAC,UAAU,KAAK,SAAS,EAAE;QACvC,OAAO,sBAAsB,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;KACtD;IAED,OAAO;QACL,IAAI,EAAE,UAAU,CAAC,IAAI;QACrB,OAAO,EAAE,UAAU,CAAC,OAAO;QAC3B,MAAM,EAAE,UAAU,CAAC,MAAM;KAC1B,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,8BAA8B,CAC5C,EAAU,EACV,QAAgC,EAChC,UAAmC;IAEnC,OAAO;QACL,EAAE;QACF,UAAU;QACV,QAAQ;KACT,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,4BAA4B,CAC1C,EAAU,EACV,KAAuC;IAEvC,OAAO;QACL,EAAE;QACF,KAAK,EAAE,sBAAsB,CAAC,KAAK,CAAC;KACrC,CAAC;AACJ,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,sCAAsC,CACpD,KAA0B,EAC1B,QAAyC;IAEzC,OAAO,gDAAgD,CACrD,KAAK,EACL,QAAQ,EACR,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EACR,4BAA4B,CAC7B,CAAC;AACJ,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,UAAU,gDAAgD,CAK9D,KAA0B,EAC1B,QAAgD,EAChD,cAA+D,EAC/D,YAA6E;IAE7E,MAAM,cAAc,GAA+C,QAAQ,CAAC,SAAS,CAAC,GAAG,CACvF,cAAc,CACf,CAAC;IACF,MAAM,eAAe,GAAG,cAAc,CAAC,MAAM,CAC3C,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CACpE,CAAC;IAEF,OAAO,qBAAqB,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;AACvD,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,UAAU,mEAAmE,CAKjF,KAA0B,EAC1B,QAAgD,EAChD,cAAqD,EACrD,YAA6E;IAE7E,MAAM,MAAM,GAAG,gDAAgD,CAC7D,KAAK,EACL,QAAQ,EACR,cAAc,EACd,YAAY,CACb,CAAC;IACF,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE;QAC3B,UAAU,EAAE,QAAQ,CAAC,UAAU;QAC/B,YAAY,EAAE,QAAQ,CAAC,YAAY;KACpC,CAAC,CAAC;AACL,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TextDocumentStatistics,\n  TextAnalyticsError as GeneratedTextAnalyticsErrorModel,\n  InnerError,\n  ErrorCodeValue,\n  InnerErrorCodeValue,\n  TextAnalyticsWarning,\n  DocumentError,\n  TextDocumentBatchStatistics,\n  TextDocumentInput\n} from \"./generated/models\";\nimport { sortResponseIdObjects } from \"./util\";\n\n/**\n * The result of a text analytics operation on a single input document.\n * @internal\n */\nexport type TextAnalyticsResult = TextAnalyticsSuccessResult | TextAnalyticsErrorResult;\n\n/**\n * An Error Code returned from the Text Analytics service. Possible\n * values include:\n *\n * For more information about the error, see the `message` property of the associated error.\n */\nexport type ErrorCode = ErrorCodeValue | InnerErrorCodeValue;\n\n/**\n * Type describing an error from the Text Analytics service.\n */\nexport interface TextAnalyticsError {\n  /**\n   * A code describing the kind of error produced\n   */\n  readonly code: ErrorCode;\n  /**\n   * A message from the service explaining the error\n   */\n  readonly message: string;\n  /**\n   * The target of the particular error (for example, the name of an invalid parameter)\n   */\n  readonly target?: string;\n}\n\n/**\n * Base type for results of text analytics operations corresponding to a single\n * input document.\n */\nexport interface TextAnalyticsSuccessResult {\n  /**\n   * Unique, non-empty document identifier.\n   */\n  readonly id: string;\n\n  /**\n   * Statistics about the input document and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  readonly statistics?: TextDocumentStatistics;\n\n  /**\n   * An array of warning data corresponding to this document.\n   *\n   * If no warnings were returned, this array will be empty.\n   */\n  readonly warnings: TextAnalyticsWarning[];\n\n  /**\n   * Discriminant to determine if that this is an error result.\n   */\n  readonly error?: undefined;\n}\n\n/**\n * Base type for error results of text analytics operations corresponding to a\n * single document.\n */\nexport interface TextAnalyticsErrorResult {\n  /**\n   * Unique, non-empty document identifier.\n   */\n  readonly id: string;\n\n  /**\n   * The Error for this document result.\n   */\n  readonly error: TextAnalyticsError;\n}\n\n/**\n * @internal\n */\nexport interface TextAnalyticsResultArray<T1 extends TextAnalyticsSuccessResult>\n  extends Array<T1 | TextAnalyticsErrorResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\n/**\n * @internal\n */\nexport interface TextAnalyticsResponse<T1 extends TextAnalyticsSuccessResult> {\n  /**\n   * Response by document\n   */\n  documents: T1[];\n  /**\n   * Errors by document id.\n   */\n  errors: DocumentError[];\n  /**\n   * if includeStatistics=true was specified in the request this field will contain information about the request payload.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * This field indicates which model is used for scoring.\n   */\n  modelVersion: string;\n}\n\n/**\n * Helper function for converting nested service error into\n * the unified TextAnalyticsError\n * @internal\n */\nexport function intoTextAnalyticsError(\n  errorModel: GeneratedTextAnalyticsErrorModel | InnerError\n): TextAnalyticsError {\n  // Return the deepest error. This will always be at most\n  // one level for TextAnalytics\n  if (errorModel.innererror !== undefined) {\n    return intoTextAnalyticsError(errorModel.innererror);\n  }\n\n  return {\n    code: errorModel.code,\n    message: errorModel.message,\n    target: errorModel.target\n  };\n}\n\n/**\n * @internal\n */\nexport function makeTextAnalyticsSuccessResult(\n  id: string,\n  warnings: TextAnalyticsWarning[],\n  statistics?: TextDocumentStatistics\n): TextAnalyticsSuccessResult {\n  return {\n    id,\n    statistics,\n    warnings\n  };\n}\n\n/**\n * @internal\n */\nexport function makeTextAnalyticsErrorResult(\n  id: string,\n  error: GeneratedTextAnalyticsErrorModel\n): TextAnalyticsErrorResult {\n  return {\n    id,\n    error: intoTextAnalyticsError(error)\n  };\n}\n\n/**\n * @internal\n * combines successful and erroneous results into a single array of results and\n * sort them so that the IDs order match that of the input documents array.\n * @param input - the array of documents sent to the service for processing.\n * @param response - the response received from the service.\n */\nexport function combineSuccessfulAndErroneousDocuments<TSuccess extends TextAnalyticsSuccessResult>(\n  input: TextDocumentInput[],\n  response: TextAnalyticsResponse<TSuccess>\n): (TSuccess | TextAnalyticsErrorResult)[] {\n  return processAndCombineSuccessfulAndErroneousDocuments(\n    input,\n    response,\n    (x) => x,\n    makeTextAnalyticsErrorResult\n  );\n}\n\n/**\n * @internal\n * combines successful and erroneous results into a single array of results and\n * sort them so that the IDs order match that of the input documents array.\n * @param input - the array of documents sent to the service for processing.\n * @param response - the response received from the service.\n * @param process - a function to convert the results from one type to another.\n */\nexport function processAndCombineSuccessfulAndErroneousDocuments<\n  TSuccessService extends TextAnalyticsSuccessResult,\n  TSuccessSDK extends TextAnalyticsSuccessResult,\n  TError extends TextAnalyticsErrorResult\n>(\n  input: TextDocumentInput[],\n  response: TextAnalyticsResponse<TSuccessService>,\n  processSuccess: (successResult: TSuccessService) => TSuccessSDK,\n  processError: (id: string, error: GeneratedTextAnalyticsErrorModel) => TError\n): (TSuccessSDK | TextAnalyticsErrorResult)[] {\n  const successResults: (TSuccessSDK | TextAnalyticsErrorResult)[] = response.documents.map(\n    processSuccess\n  );\n  const unsortedResults = successResults.concat(\n    response.errors.map((error) => processError(error.id, error.error))\n  );\n\n  return sortResponseIdObjects(input, unsortedResults);\n}\n\n/**\n * @internal\n * combines successful and erroneous results into a single array of results and\n * sort them so that the IDs order match that of the input documents array. It\n * also attaches statistics and modelVersion to the returned array.\n * @param input - the array of documents sent to the service for processing.\n * @param response - the response received from the service.\n */\nexport function combineSuccessfulAndErroneousDocumentsWithStatisticsAndModelVersion<\n  TSuccessService extends TextAnalyticsSuccessResult,\n  TSuccessSDK extends TextAnalyticsSuccessResult,\n  TError extends TextAnalyticsErrorResult\n>(\n  input: TextDocumentInput[],\n  response: TextAnalyticsResponse<TSuccessService>,\n  processSuccess: (doc: TSuccessService) => TSuccessSDK,\n  processError: (id: string, error: GeneratedTextAnalyticsErrorModel) => TError\n): TextAnalyticsResultArray<TSuccessSDK> {\n  const sorted = processAndCombineSuccessfulAndErroneousDocuments(\n    input,\n    response,\n    processSuccess,\n    processError\n  );\n  return Object.assign(sorted, {\n    statistics: response.statistics,\n    modelVersion: response.modelVersion\n  });\n}\n"]}